#+TITLE: Desktop Configuration
#+AUTHOR: Comrade Martin Miroslavovich Michalec

#+STARTUP: overview
#+PROPERTY: header-args                :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:conf           :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:xml            :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:scheme         :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:shell          :tangle-mode (identity #o555) :mkdirp yes :shebang "#!/bin/sh"
#+PROPERTY: header-args:emacs-lisp     :tangle-mode (identity #o444) :mkdirp yes :tangle ../../build/.config/emacs/lisp/custom-desktop.el
#+PROPERTY: header-args:conf-xdefaults :tangle-mode (identity #o444) :mkdirp yes :tangle ../../build/.config/Xresources
#+PROPERTY: header-args:makefile       :tangle-mode (identity #o444) :mkdirp yes :tangle ../../script/30-Desktop.makefile

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:

* System Settings

Load system-specific settings from ~~/.config/emacs/per-system-settings.el~ and unpack relevant values into blocks so that they can be used in configuration file blocks.  These settings are configured in [[file:Systems.org::*Per-System Settings][Systems.org]].

#+NAME: system-settings
#+BEGIN_SRC emacs-lisp :session system-settings :tangle no

  (load-file "../../build/.config/emacs/lisp/custom-system-settings.el")
  (custom/system-settings-load)

#+END_SRC

#+NAME: get-system-setting
#+BEGIN_SRC emacs-lisp :var name="nil" :session system-settings :tangle no

  (custom/system-settings-get (intern name))

#+END_SRC

* Fonts and Themes

I use [[https://github.com/derat/xsettingsd][xsettingsd]] as a minimal settings daemon for Xorg applications.  It replaces similar daemons from desktop environments like GNOME and XFCE and enables me to use a simple configuration file like the following:

*.config/xsettingsd/xsettingsd.conf:*

#+BEGIN_SRC conf :tangle ../../build/.config/xsettingsd/xsettingsd.conf :noweb yes

  Net/ThemeName "industrial"
  Net/IconThemeName "industrial"
  Gtk/DecorationLayout ""
  Gtk/FontName "Liberation 11"
  Gtk/MonospaceFontName "Liberation Mono 10"
  Gtk/CursorThemeName "industrial"
  Xft/Antialias 1
  Xft/Hinting 0
  Xft/HintStyle "hintnone"
  Xft/DPI <<dpi()>> # DPI * 1024

#+END_SRC

I also have to do an extra step to make sure Emacs can find the font path from the "desktop" profile.

*.config/fontconfig/fonts.conf:*

#+BEGIN_SRC xml :tangle ../../build/.config/fontconfig/fonts.conf

  <?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
  <fontconfig>
    <dir>~/dotfiles/fonts</dir>
    <dir>~/.guix-extra-profiles/desktop/desktop/share/fonts</dir>
    <alias>
      <family>Apple Color Emoji</family>
      <prefer>
        <family>Noto Color Emoji</family>
      </prefer>
    </alias>
  </fontconfig>

#+END_SRC

*DPI*

#+NAME: dpi
#+BEGIN_SRC emacs-lisp :session=system-settings :var settings=system-settings :tangle no
(* 1024 (alist-get 'desktop/dpi custom/system-settings))
#+END_SRC

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  ;; Settings Manager
  "xsettingsd"

  ;; GTK Themes
  "arc-icon-theme"
  "matcha-theme"
  "hicolor-icon-theme"
  "gnome-icon-theme"
  "gnome-backgrounds"
  "papirus-icon-theme"
  "breeze-icons"

  ;; Fonts
  "font-terminus"
  "font-liberation"
  "font-gnu-unifont"
  "font-juliamono"
  "font-awesome"
  "font-google-noto"
  "font-google-roboto"
  "font-fira-code"
  "font-fira-sans"
  "font-jetbrains-mono"
  "font-iosevka"
  "font-iosevka-aile"
  "font-abattis-cantarell"
  "font-dejavu"
  "font-gnu-freefont"
  "font-google-material-design-icons"
  "gs-fonts"

#+END_SRC

* Desktop Environment

I use Emacs as the desktop window manager via EXWM.  This configuration gets loaded relatively early in Emacs startup if running on a Linux machine.

** Helper Functions

#+BEGIN_SRC emacs-lisp

  (defun custom/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun custom/exwm-bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (funcall ',invocation)))
      (setq key (pop bindings)
            invocation (pop bindings))))

  (defun custom/exwm-bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (exwm/run-in-background ,command)))
      (setq key (pop bindings)
            command (pop bindings))))

#+END_SRC

** Window Manager
*** EXWM

#+BEGIN_SRC emacs-lisp

  (use-package exwm
    :if custom/exwm-enabled
    :init
    (setq mouse-autoselect-window    t
          focus-follows-mouse        t
          exwm-workspace-warp-cursor t)

    :custom
    (exwm-workspace-number 5)
    (exwm-layout-show-all-buffers    t)
    (exwm-workspace-show-all-buffers t)

    :config
    ;; Hide the modeline on all floating windows
    (add-hook 'exwm-floating-setup-hook 'exwm-layout-hide-mode-line)
    (add-hook 'exwm-randr-screen-change-hook  #'custom/exwm-randr-screen-change )
    (add-hook 'exwm-manage-finish-hook #'custom/configure-window-by-class)
    (add-hook 'exwm-init-hook #'custom/exwm-init)
    (add-hook 'exwm-update-class-hook #'custom/exwm-update-class)
    (add-hook 'exwm-update-title-hook #'custom/exwm-update-title)

    (add-hook 'eshell-mode-hook
                (lambda ()
                  (exwm-workspace-rename-buffer "Eshell")))
    (add-hook 'eshell-exec-hook
                (lambda (process)
                  (exwm-workspace-rename-buffer
                   (format "Eshell: %s" (process-name process)))))
    (add-hook 'eshell-kill-hook
                (lambda (process status)
                  (exwm-workspace-rename-buffer "Eshell")))

    (exwm-enable))

#+END_SRC

*** Initialization

#+BEGIN_SRC emacs-lisp

  (defun custom/exwm-init ()
    (with-eval-after-load 'perspective
      (exwm-workspace-switch-create 0)
      (persp-switch "Chat")
      (persp-kill "Main")
      ;; TODO launch IRC/matrix

      (exwm-workspace-switch-create 1)
      ; (eshell) ;; leave dashboard open

      (exwm-workspace-switch-create 2)
      (persp-switch "Browser")
      (persp-kill "Main")

      (exwm-workspace-switch-create 3)
      (persp-switch "Communication")
      (persp-kill "Main")

      (exwm-workspace-switch-create 4)
      (persp-switch "Media")
      (persp-kill "Main")

      (exwm-workspace-switch 1))

    ; (exwm/run-in-background "dunst")
    ; (exwm/run-in-background "nm-applet")
    ; (exwm/run-in-background "syncthing-gtk --minimized")
    ; (exwm/run-in-background "udiskie -t")
    ; (exwm/run-in-background "redshift -l 37.983810:23.727539 -t 6500:3500")
    ; (custom/panel-launch)
    )

#+END_SRC

*** Application Window Configuration

#+BEGIN_SRC emacs-lisp

  (defun custom/configure-window-by-class ()
    (interactive)
    (pcase exwm-class-name
      ("discord" (exwm-workspace-move-window 0))
      ("Vimb" (exwm-workspace-move-window 2)
              (exwm-workspace-switch      2))
      ("qutebrowser" (exwm-workspace-move-window 2))
      ("Spotify" (exwm-workspace-move-window 4))
      ("Emacs" (call-interactively #'exwm-input-release-keyboard))
      ("mpv" (exwm-floating-toggle-floating))))

#+END_SRC

*** Update Class

#+BEGIN_SRC emacs-lisp

    (defun custom/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))

#+END_SRC

*** Update Title

#+BEGIN_SRC emacs-lisp

  (defun custom/exwm-update-title ()
    (pcase exwm-class-name
      ("Vimb"        (exwm-workspace-rename-buffer (format "Vimb: %s"        exwm-title)))
      ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title)))
      ("Zathura"     (exwm-workspace-rename-buffer (format "Zathura: %s"     exwm-title)))))

#+END_SRC

*** Update Monitor Layout

#+BEGIN_SRC emacs-lisp

  (defun custom/exwm-randr-screen-change ()
    (shell-command "autorandr --change --force")
    (message "Screen configuration: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

#+END_SRC

*** Position Window

#+BEGIN_SRC emacs-lisp

  (defun custom/position-window-bottom-right ()
    (let* ((frame-xy  (frame-position        ))
           (frame-x   (car frame-xy          ))
           (frame-y   (cdr frame-xy          ))
           (frame-w   (frame-pixel-width     ))
           (frame-h   (frame-pixel-height    ))
           (display-w (x-display-pixel-width ))
           (display-h (x-display-pixel-height)))
      (exwm-floating-move (- display-w frame-w frame-x)
                          (- display-h frame-h frame-y))))

#+END_SRC

*** Workspace Layout

#+BEGIN_SRC emacs-lisp

  (use-package exwm-randr
    :straight nil
    :if custom/exwm-enabled
    :after exwm

    :custom
    (exwm-randr-workspace-monitor-plist
     (pcase (system-name)
       ("kirpich" '(2 "VGA-1" 3 "VGA-1" 4 "VGA-1" 5 "VGA-1"))))

    :config
    (exwm-randr-enable))

#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp

  (setq exwm-input-prefix-keys
    '(?\C-x
      ?\C-h
      ?\C-w
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j ;; Buffer list
      ?\C-\M-k ;; Browser list
      ?\C-\M-n ;; Next workspace
      ?\C-\    ;; Ctrl+Space
      ?\C-\;))

  ;; C-q (quote) will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

  (defun custom/exwm-run-vimb ()
    (custom/run-in-background "vimb"))
  (defun custom/exwm-run-qutebrowser ()
    (custom/run-in-background "qutebrowser"))

  (custom/exwm-bind-function
    "s-o" 'custom/exwm-run-qutebrowser
    "s-q" 'kill-buffer)

  (use-package desktop-environment
    :after exwm
    :diminish desktop-environment-mode

    :custom
    (desktop-environment-brightness-small-increment  "2%+")
    (desktop-environment-brightness-small-decrement  "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-")
  ;;(desktop-environment-screenshot-command "scrot ?? idk")

    :config (desktop-environment-mode 1))

  (defhydra hydra-exwm-move-resize (:timeout 4)
    ("j"     (lambda () (interactive) (exwm-layout-enlarge-window 10)) "🢗 10")
    ("J"     (lambda () (interactive) (exwm-layout-enlarge-window 30)) "🢗 30")
    ("k"     (lambda () (interactive) (exwm-layout-shrink-window  10)) "🢕 10")
    ("K"     (lambda () (interactive) (exwm-layout-shrink-window  30)) "🢕 30")
    ("h"     (lambda () (interactive) (exwm-layout-shrink-window  10)) "🢔 10")
    ("H"     (lambda () (interactive) (exwm-layout-shrink-window  30)) "🢔 30")
    ("l"     (lambda () (interactive) (exwm-layout-enlarge-window 10)) "🢖 10")
    ("L"     (lambda () (interactive) (exwm-layout-enlarge-window 30)) "🢖 30")

    ("C-j"   (lambda () (interactive) (exwm-layout-enlarge-window 10)) "🢗 10")
    ("C-S-j" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "🢗 30")
    ("C-k"   (lambda () (interactive) (exwm-layout-shrink-window  10)) "🢕 10")
    ("C-S-k" (lambda () (interactive) (exwm-layout-shrink-window  30)) "🢕 30")
    ("C-h"   (lambda () (interactive) (exwm-layout-shrink-window  10)) "🢔 10")
    ("C-S-h" (lambda () (interactive) (exwm-layout-shrink-window  30)) "🢔 30")
    ("C-l"   (lambda () (interactive) (exwm-layout-enlarge-window 10)) "🢖 10")
    ("C-S-l" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "🢖 30")

    ("f" nil "finished" :exit t))

  (setq exwm-input-global-keys
        `(([?\s-\C-r] . exwm-reset) ;; Reset to line-mode
          ([?\s-r   ] . hydra-exwm-move-resize/body)
          ([?\s-w   ] . exwm-workspace-switch)
          ([?\s-e   ] . dired-jump)
          ([?\s-E   ] . (lambda () (interactive) (dired "~")))
          ([?\s-Q   ] . (lambda () (interactive) (kill-buffer)))

          ([?\s-`   ] . (lambda () (interactive) (exwm-workspace-switch-create  0)))
          ,@(mapcar (lambda (i) ;; 's-N': Switch to certain workspace
                      `(,(kbd (format "s-%d" i)) .
                        (lambda () (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ([?\s-0   ] . (lambda () (interactive) (exwm-workspace-switch-create 10)))))

  (exwm-input-set-key (kbd "<s-return>") 'eshell)
  (exwm-input-set-key (kbd "s-SPC"     ) 'counsel-linux-app)
  (exwm-input-set-key (kbd "s-f"       ) 'exwm-layout-toggle-fullscreen)

#+END_SRC

** System Tray

#+BEGIN_SRC emacs-lisp

  (use-package exwm-systemtray
    :straight nil
    :disabled
    :if custom/exwm-enabled
    :after exwm

    :custom
    (exwm-systemtray-height 20)

    :config
    (exwm-systemtray-enable))

#+END_SRC

** Panel

I use [[https://github.com/polybar/polybar][Polybar]] to display a panel at the top of the primary screen to display my current EXWM workspace, CPU usage and temperature, battery status, time, and system tray.  It uses some custom hooks back into Emacs via =emacsclient=.

*Guix Packages:*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "polybar"

#+END_SRC

*** Settings

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config :noweb yes

  [settings]
  screenchange-reload = true
  ;compositing-background = xor
  ;compositing-background = screen
  ;compositing-foreground = source
  ;compositing-border = over
  ;pseudo-transparency = false

  [global/wm]
  margin-top    = 0
  margin-bottom = 0

#+END_SRC

*** Colors

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config :noweb yes

  [colors]

  black       = ${xrdb:color0: #000000}
  darkred     = ${xrdb:color1: #7F0000}
  darkgreen   = ${xrdb:color2: #007F00}
  darkyellow  = ${xrdb:color3: #FF7F00}
  darkblue    = ${xrdb:color4: #00007F}
  darkmagenta = ${xrdb:color5: #7F007F}
  darkcyan    = ${xrdb:color6: #00FF7F}
  lightgray   = ${xrdb:color7: #7F7F7F}
  gray        = ${xrdb:color8: #4D4D4D}
  red         = ${xrdb:color9: #FF0000}
  green       = ${xrdb:color10:#00FF00}
  yellow      = ${xrdb:color11:#FFFF00}
  blue        = ${xrdb:color12:#0000FF}
  magenta     = ${xrdb:color13:#FF00FF}
  cyan        = ${xrdb:color14:#00FFFF}
  white       = ${xrdb:color15:#FFFFFF}

  background = ${xrdb:background: #000000}
  foreground = ${xrdb:foreground: #FFFFFF}
  cursor     = ${xrdb:cursorColor:#FFFF00}

  alert               = ${colors.red}
  foreground-inactive = ${colors.gray}

#+END_SRC

*** Panel

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config :noweb yes

  [bar/panel]

  fixed-center = true
  enable-ipc   = true

  width  = 100%
  height = <<get-system-setting(name="polybar/height")>>
  radius = 0.0

  offset-x = 0
  offset-y = 0

  padding-top    = 0
  padding-right  = 0
  padding-bottom = 0
  padding-left   = 0

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size  = 1
  line-color = #FF0000

  border-size  = 0
  border-color = #00000000

  module-margin = 0

  separator = " "

  font-0 = Terminus:pixelsize=10
  font-1 = Terminus:pixelsize=10
  font-2 = Inconsolata Nerd Font:size=8;1
  font-3 = Noto Color Emoji:scale=14:style=Regular;0
  font-4 = JuliaMono:pixelsize=9;1
  font-5 = Unifont:style=Regular

  tray-maxsize = 0
  ; tray-position   = right
  ; tray-padding    = 2
  ; tray-background = ${colors.black}

  ; scroll-up   = bspwm-desknext
  ; scroll-down = bspwm-deskprev

  cursor-click  = pointer
  cursor-scroll = ns-resize

  modules-left   = exwm exwm-path xkeyboard xbacklight volume xwindow
  ;modules-center = spotify
  modules-right  = memory cpu temperature battery filesystem wlan eth date
  ;modules-right  = torrents mu4e memory cpu temperature battery filesystem wlan eth date

#+END_SRC

*** Modules


#+BEGIN_SRC emacs-lisp

  (defun custom/polybar-hook-send (name number)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" name number)))

#+END_SRC

**** EXWM

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/exwm]
  type = custom/ipc
  hook-0 = emacsclient -e "(custom/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.blue}
  format-background = ${colors.background}
  format-padding = 1

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (defun custom/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "")
      (1 "")
      (2 "")
      (3 "")
      (4 "")))

  (defun custom/polybar-update-exwm (&optional path)
    (custom/polybar-hook-send "exwm" 1))
  (add-hook 'exwm-workspace-switch-hook #'custom/polybar-update-exwm)
  (add-hook 'bufler-workspace-set-hook  #'custom/polybar-update-exwm)

#+END_SRC

**** EXWM Path

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/exwm-path]
  type = custom/ipc
  hook-0 = emacsclient -e "(custom/polybar-exwm-workspace-path)" | sed -e 's/^"//' -e 's/"$//'
  format-foreground = #f78c6c
  initial = 1

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (defun custom/polybar-exwm-workspace-path ()
    (let ((workspace-path (frame-parameter nil 'bufler-workspace-path-formatted)))
      (if workspace-path
          (substring-no-properties workspace-path)
          "")))

  (defun custom/polybar-update-exwm-path (&optional path)
    (custom/polybar-hook-send "exwm-path" 1))
  (add-hook 'exwm-workspace-switch-hook #'custom/polybar-update-exwm-path)
  (add-hook 'bufler-workspace-set-hook  #'custom/polybar-update-exwm-path)

#+END_SRC

**** Mu4e

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/mu4e]
  type = custom/ipc
  hook-0 = emacsclient -e "(custom/polybar-mail-count 500)" | sed -e 's/^"//' -e 's/"$//'
  format-padding = 3
  initial = 1
  format-underline = ${colors.blue}
  click-left = emacsclient -e '(custom/mu4e-go-to-inbox)'

#+END_SRC

#+BEGIN_SRC emacs-lisp

(defun dw/polybar-mail-count (max-count)
  (if (and dw/mail-enabled dw/mu4e-inbox-query)
    (let* ((mail-count (shell-command-to-string
                         (format "mu find --nocolor -n %s \"%s\" | wc -l" max-count dw/mu4e-inbox-query))))
      (format " %s" (string-trim mail-count)))
    ""))

#+END_SRC

**** Spotify

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/spotify]
  type = custom/script
  exec = polybar-spotify --playpause-font 6 --trunclen 100
  interval = 1
  format-underline = ${colors.green}
  click-left = playerctl play-pause

#+END_SRC

**** Weather

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/weather]
  type = custom/script
  exec = ~/.local/bin/statusbar/weather
  interval = 5000
  ;format-underline =

#+END_SRC

**** Packages

#+BEGIN_SRC conf :tangle no

  [module/packages]
  type = custom/script
  exec = ~/.local/bin/statusbar/packages
  interval = 30
  format-underline = ${colors.yellow}
  click-left = $TERMINAL -e yay -Syu&

#+END_SRC

**** Torrents

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/torrents]
  type = custom/script
  exec = ~/.local/bin/statusbar/torrents
  interval = 30
  format-underline = ${colors.green}
  click-left = $TERMINAL -e tremc

#+END_SRC

**** Xwindow

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/xwindow]
  type = internal/xwindow
  label = %title:0:30:...%

#+END_SRC

**** Xkeyboard

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/xkeyboard]
  type = internal/xkeyboard
  blacklist-0 = num lock

  label-layout = "%{A1:rotatekeymap:}  %layout%%{A}"
  ; label-layout-underline = ${colors.magenta}

  label-indicator-padding = 2
  label-indicator-margin = 1
  label-indicator-background = ${colors.background}
  label-indicator-underline = ${colors.magenta}

#+END_SRC

**** Filesystem

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/filesystem]
  type = internal/fs
  interval = 25

  mount-0 = /
  mount-1 = /home

  label-mounted-underline = ${colors.blue}
  label-mounted = %{F#0000ff}%mountpoint%%{F-}: %percentage_used%%
  label-unmounted = %mountpoint% not mounted
  label-unmounted-foreground = ${colors.foreground-inactive}

#+END_SRC

**** MPD

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/mpd]
  type = internal/mpd
  format-online = <label-song>  <label-time>

  click-left = $TERMINAL -e ncmpcpp
  click-right = mpc toggle

  label-song =  %artist% - %title%
  label-song-maxlen = 70
  label-song-ellipsis = true

#+END_SRC

**** Xbacklight

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/xbacklight]
  type = internal/xbacklight

  format = <label> <bar>
  label = "💡"

  bar-width = 10
  bar-indicator = |
  bar-indicator-foreground = ${colors.white}
  bar-indicator-font = 2
  bar-fill = ─
  bar-fill-font = 2
  bar-fill-foreground = ${colors.yellow}
  bar-empty = ─
  bar-empty-font = 2
  bar-empty-foreground = ${colors.foreground-inactive}

#+END_SRC

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "xbacklight"

#+END_SRC

**** Backlight ACPI

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/backlight-acpi]
  inherit = module/xbacklight
  type = internal/backlight
  card = intel_backlight

#+END_SRC

**** CPU

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/cpu]

  type = internal/cpu
  interval = 2

  format-prefix = "🖥 "
  format-prefix-foreground = ${colors.foreground}
  format-underline = ${colors.red}

  label = %percentage:2%%

  ramp-coreload-spacing = 0
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-0 = ▁
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

#+END_SRC

**** Memory

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/memory]
  type = internal/memory
  interval = 2
  format-prefix = "🧠 "
  format-prefix-foreground = ${colors.foreground}
  format-underline = ${colors.magenta}
  label = %percentage_used%%

#+END_SRC

**** WLAN

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/wlan]
  type = internal/network
  interface = wlp3s0
  interval = 3.0

  format-connected = %{F#0000FF}直%{F-} <label-connected>
  format-connected-underline = ${colors.blue}
  label-connected = %essid%

  ; format-disconnected =
  format-disconnected = <label-disconnected>
  ; format-disconnected-underline = ${self.format-connected-underline}
  label-disconnected = 睊 %ifname%
  label-disconnected-foreground = ${colors.foreground-inactive}

  ; left unused
  ramp-signal-0 = 
  ramp-signal-1 = 
  ramp-signal-2 = 
  ramp-signal-3 = 
  ramp-signal-4 = 
  ramp-signal-foreground = ${colors.foreground}

#+END_SRC

**** Ethernet

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/eth]
  type = internal/network
  interface = enp0s25
  interval = 3.0

  format-connected-underline = ${colors.green}
  format-connected-prefix = " "
  format-connected-prefix-foreground = ${colors.foreground}
  label-connected = %local_ip%

  ; format-disconnected =
  format-disconnected = <label-disconnected>
  ; format-disconnected-underline = ${self.format-connected-underline}
  label-disconnected =  %ifname%
  label-disconnected-foreground = ${colors.foreground-inactive}

#+END_SRC

**** Date

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/date]
  type = internal/date
  interval = 1

  date = "%Y-%m-%d"
  time = %H:%M:%S

  format-prefix-foreground = ${colors.foreground}
  format-underline = ${colors.blue}

  label = %date% %time%

#+END_SRC

**** Volume

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/volume]
  type = internal/pulseaudio

  format-volume = <label-volume> <bar-volume>
  label-volume =   %percentage%%
  label-volume-foreground = ${colors.foreground}
  ; label-volume-underline = ${colors.foreground}

  format-muted-prefix = "  "
  label-muted = muted
  label-muted-foreground = ${colors.foreground-inactive}

  bar-volume-width = 10
  bar-volume-foreground-0 = ${colors.blue}
  bar-volume-foreground-1 = ${colors.blue}
  bar-volume-foreground-2 = ${colors.green}
  bar-volume-foreground-3 = ${colors.green}
  bar-volume-foreground-4 = ${colors.green}
  bar-volume-foreground-5 = ${colors.yellow}
  bar-volume-foreground-6 = ${colors.red}
  bar-volume-gradient = false
  bar-volume-indicator = |
  bar-volume-indicator-font = 2
  bar-volume-fill = ─
  bar-volume-fill-font = 2
  bar-volume-empty = ─
  bar-volume-empty-font = 2
  bar-volume-empty-foreground = ${colors.foreground-inactive}

#+END_SRC

**** Battery

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = AC
  full-at = 98
  time-format = %-l:%M

  label-charging    = %percentage%% / %time%
  label-discharging = %percentage%% / %time%
  format-full       = <ramp-capacity> <label-full>

  format-charging = <animation-charging>  <label-charging>
  format-charging-underline = ${colors.yellow}

  format-discharging = <label-discharging>
  format-discharging-underline = ${colors.red}

  format-full-prefix = "⚡ "
  format-full-prefix-foreground = ${colors.yellow}
  format-full-underline = ${colors.green}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  ramp-capacity-foreground = ${colors.foreground}

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-foreground = ${colors.yellow}
  animation-charging-framerate = 1000

#+END_SRC

**** Temperature

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <ramp> <label>
  format-underline = ${colors.red}
  format-warn = <ramp> <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%
  ; label-warn-foreground = ${colors.secondary}

  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 
  ramp-foreground = ${colors.red}

#+END_SRC

**** Powermenu

#+BEGIN_SRC conf :tangle ../../build/.config/polybar/config

  [module/powermenu]
  type = custom/menu

  expand-right = true

  format-spacing = 1

  label-open = O
  ; label-open-foreground = ${colors.secondary}
  label-close = C cancel
  ; label-close-foreground = ${colors.secondary}
  label-separator = |
  label-separator-foreground = ${colors.foreground}

  menu-0-0 = reboot
  menu-0-0-exec = menu-open-1
  menu-0-1 = power off
  menu-0-1-exec = menu-open-2

  menu-1-0 = cancel
  menu-1-0-exec = menu-open-0
  menu-1-1 = reboot
  menu-1-1-exec = sudo reboot

  menu-2-0 = power off
  menu-2-0-exec = sudo poweroff
  menu-2-1 = cancel
  menu-2-1-exec = menu-open-0

#+END_SRC

*** Launch / Kill

#+BEGIN_SRC emacs-lisp

  (setq custom/panel-process nil)
  (defun custom/panel-launch ()
    (interactive)
    (custom/panel-kill)
    (setq custom/panel-process
          (start-process-shell-command "polybar" nil "polybar -r panel")))
  (defun custom/panel-kill ()
    (interactive)
    (when custom/panel-process
      (ignore-errors (kill-process custom/panel-process))
      (setq custom/panel-process nil)))

#+END_SRC

** Notifications

[[https://dunst-project.org/][Dunst]] is a minimal interface for displaying desktop notifications.  It is quite hackable but I'm not currently taking much advantage of its power.  One useful feature is the ability to recall notification history; the keybinding is =C-`= in my configuration (though I'd prefer if I could invoke it from an Emacs keybinding somehow).

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "dunst"
  "libnotify"  ; For notify-send

#+END_SRC

*.config/dunst/dunstrc:*

#+BEGIN_SRC conf :tangle ../../build/.config/dunst/dunstrc :noweb yes

[global]
    ### Display ###
    monitor = 0

    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    geometry = "500x10-10+50"

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = no

    # The transparency of the window.  Range: [0; 100].
    transparency = 10

    # The height of the entire notification.  If the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 1
    separator_color = frame

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 8

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 2

    # Defines color of the frame around the notification window.
    frame_color = "#89AAEB"

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    idle_threshold = 120

    ### Text ###

    font = Cantarell <<get-system-setting(name="dunst/font-size")>>

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # When word_wrap is set to no, specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Align icons left/right/off
    icon_position = left

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = <<get-system-setting(name="dunst/max-icon-size")>>

    # Paths to default icons.
    icon_path = /home/daviwil/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/status/:/home/daviwil/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/devices/:/home/daviwil/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/emblems/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = no

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # Browser for opening urls in context menu.
    browser = qutebrowser

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    startup_notification = false
    verbosity = mesg

    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 4

    mouse_left_click = close_current
    mouse_middle_click = do_action
    mouse_right_click = close_all

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

[shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    #close = ctrl+space

    # Close all notifications.
    #close_all = ctrl+shift+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1". Make sure this key actually exists on your keyboard layout,
    # e.g. check output of 'xmodmap -pke'
    history = ctrl+grave

    # Context menu.
    context = ctrl+shift+period

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#222222"
    foreground = "#888888"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_normal]
    background = "#1c1f26"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

#+END_SRC

* Applications
** Browsers
*** Qutebrowser

[[https://github.com/qutebrowser/qutebrowser][Qutebrowser]] is a great keyboard-centric browser which uses the Chromium rendering engine via QT 5's WebEngine component.  I've configured it to act more like Vimb for window-per-tab behavior that integrates well into Emacs.  One thing I like about this browser is that it does a much better job of remembering what windows you had open when it exits so that you can maintain your session more easily.  I also like that when you reopen a tab/window, the history of that window is still present.

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "qutebrowser"

#+END_SRC

#+BEGIN_SRC conf :tangle ../../build/.config/mimeapps.list

  [Default Applications]
  text/html=qutebrowser.desktop
  x-scheme-handler/http=qutebrowser.desktop
  x-scheme-handler/https=qutebrowser.desktop
  x-scheme-handler/about=qutebrowser.desktop
  x-scheme-handler/unknown=qutebrowser.desktop

#+END_SRC

#+BEGIN_SRC python :tangle ../../build/.config/qutebrowser/config.py :noweb yes

  import subprocess
  import os
  import getpass
  from qutebrowser.api import interceptor

  # https://qutebrowser.org/doc/help/settings.html

  # pylint: disable=C0111
  from qutebrowser.config.configfiles import ConfigAPI  # noqa: F401
  from qutebrowser.config.config import ConfigContainer  # noqa: F401
  config: ConfigAPI = config  # noqa: F821 pylint: disable=E0602,C0103
  c: ConfigContainer = c  # noqa: F821 pylint: disable=E0602,C0103

  # Youtube Add Blocking
  def filter_yt(info: interceptor.Request):
      """Block the given request if necessary."""
      url = info.request_url
      if (                url.host() == "www.youtube.com"
      and                 url.path() == "/get_video_info"
      and "&adformat=" in url.query()): info.block()
  interceptor.register(filter_yt)

  c.url.start_pages = [f"file://localhost/home/{getpass.getuser()}/.config/start_page/index.html"]

  # Open every tab as a new window, Vimb style
  c.tabs.tabs_are_windows = True
  c.tabs.show = "multiple"
  c.tabs.last_close = "close"

  c.auto_save.session = True
  c.scrolling.smooth = True
  c.session.lazy_restore = True
  c.content.autoplay = False

  # Scale pages and UI better for hidpi
  c.zoom.default = "<<get-system-setting(name="qutebrowser/default-zoom")>>%"
  c.fonts.hints = "bold 20pt monospace"

  # Better default fonts
  c.fonts.web.family.standard = "Bitstream Vera Sans"
  c.fonts.web.family.serif = "Bitstream Vera Serif"
  c.fonts.web.family.sans_serif = "Bitstream Vera Sans"
  c.fonts.web.family.fixed = "Fira Mono"
  c.fonts.statusbar = "16pt Terminus"

  # Use dark mode where possible
  c.colors.webpage.darkmode.enabled = True
  c.colors.webpage.darkmode.policy.images = "never"
  c.colors.webpage.bg = "black"

  # Automatically turn on insert mode when a loaded page focuses a text field
  c.input.insert_mode.auto_load = True

  # Edit fields in Emacs with Ctrl+E
  c.editor.command = ["emacsclient", "+{line}:{column}", "{file}"]

  c.downloads.location.directory = os.path.expanduser("~/downloads")
  c.downloads.location.prompt = False

  # Make Ctrl+g quit everything like in Emacs
  config.bind('<Ctrl-g>', 'leave-mode', mode='insert')
  config.bind('<Ctrl-g>', 'leave-mode', mode='command')
  config.bind('<Ctrl-g>', 'leave-mode', mode='prompt')
  config.bind('<Ctrl-g>', 'leave-mode', mode='hint')
  config.bind('v', 'spawn ~/.dotfiles/bin/umpv {url}')
  config.bind('V', 'hint links spawn ~/.dotfiles/bin/umpv {hint-url}')

  # Tweak some keybindings
  config.unbind('d') # Don't close window on lower-case 'd'
  config.bind('yy', 'yank')
  config.bind("yo", "yank inline [[{url}][{title}]]")

  config.bind("<Ctrl-h>"         , "fake-key <Backspace>"          , "insert")
  config.bind("<Ctrl-a>"         , "fake-key <Home>"               , "insert")
  config.bind("<Ctrl-e>"         , "fake-key <End>"                , "insert")
  config.bind("<Ctrl-b>"         , "fake-key <Left>"               , "insert")
  config.bind("<Mod1-b>"         , "fake-key <Ctrl-Left>"          , "insert")
  config.bind("<Ctrl-f>"         , "fake-key <Right>"              , "insert")
  config.bind("<Mod1-f>"         , "fake-key <Ctrl-Right>"         , "insert")
  config.bind("<Ctrl-p>"         , "fake-key <Up>"                 , "insert")
  config.bind("<Ctrl-n>"         , "fake-key <Down>"               , "insert")
  config.bind("<Mod1-d>"         , "fake-key <Ctrl-Delete>"        , "insert")
  config.bind("<Ctrl-d>"         , "fake-key <Delete>"             , "insert")
  config.bind("<Ctrl-w>"         , "fake-key <Ctrl-Backspace>"     , "insert")
  config.bind("<Ctrl-u>"         , "fake-key <Shift-Home><Delete>" , "insert")
  config.bind("<Ctrl-k>"         , "fake-key <Shift-End><Delete>"  , "insert")
  config.bind("<Ctrl-x><Ctrl-e>" , "open-editor"                   , "insert")

  config.bind("<Ctrl-n>"         , "fake-key <Down>"               , "command")
  config.bind("<Ctrl-p>"         , "fake-key <Up>"                 , "command")
  config.bind("<Ctrl-j>"         , "fake-key <Return>"             , "command")

  config.bind("/", "set-cmd-text / | fake-key v", "caret")

  # More binding hints here: https://gitlab.com/Kaligule/qutebrowser-emacs-config/blob/master/config.py

  def read_xresources(prefix):
      """read settings from xresources"""
      props = {}
      x = subprocess.run(["xrdb", "-query"], stdout=subprocess.PIPE)
      lines = x.stdout.decode().split("\n")
      for line in filter(lambda l: l.startswith(prefix), lines):
          prop, _, value = line.partition(":\t")
          props[prop] = value
      return props

  xresources = read_xresources("*")

  c.colors.statusbar.normal .fg = xresources["*.foreground"]
  c.colors.statusbar.normal .bg = xresources["*.background"]
  c.colors.statusbar.command.fg = xresources["*.foreground"]
  c.colors.statusbar.command.bg = xresources["*.background"]
  c.statusbar.show = "always"

  c.colors.tabs.even         .fg = xresources["*.foreground"]
  c.colors.tabs.even         .bg = xresources["*.background"]
  c.colors.tabs.odd          .fg = xresources["*.foreground"]
  c.colors.tabs.odd          .bg = xresources["*.background"]
  c.colors.tabs.selected.even.fg = xresources["*.color0"    ]
  c.colors.tabs.selected.even.bg = xresources["*.color11"   ]
  c.colors.tabs.selected.odd .fg = xresources["*.color0"    ]
  c.colors.tabs.selected.odd .bg = xresources["*.color11"   ]
  c.colors.tabs.indicator.stop   = xresources["*.color9"    ]

  c.colors.completion.odd                .bg = xresources["*.background"]
  c.colors.completion.even               .bg = xresources["*.background"]
  c.colors.completion                    .fg = xresources["*.foreground"]
  c.colors.completion.category           .fg = xresources["*.foreground"]
  c.colors.completion.category           .bg = xresources["*.background"]
  c.colors.completion.item.selected      .fg = xresources["*.foreground"]
  c.colors.completion.item.selected      .bg = xresources["*.background"]
  c.colors.completion.item.selected.match.fg = xresources["*.color9"    ]
  c.colors.completion              .match.fg = xresources["*.color9"    ]

  # c.content.user_stylesheets = "/home/martinmake/.config/surf/styles/build/default.css"

  # Load the autoconfig file (quteconfig.py)
  config.load_autoconfig()

#+END_SRC

#+BEGIN_SRC conf :tangle ../../build/.config/qutebrowser/quickmarks

  dot https://github.com/martinmake/dotfiles
  cups http://localhost:631
  gh https://github.com/$0
  npm https://www.npmjs.com/search?q $0

#+END_SRC

*** vimb

I used [[https://fanglingsu.github.io/vimb/][Vimb]] for a while because the latest Qutebrowser wasn't available in Guix's package repository, but since that problem has since been solved I've switched back to Qutebrowser as primary.  Keeping this configuration around in case I need it again.

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "vimb"

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (setq custom/open-url-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "<return>") 'ivy-immediate-done)
      map))

  (defun custom/open-url ()
    (interactive)
    (let ((history-items
            (with-temp-buffer
              (insert-file-contents "~/.config/vimb/history")
              (split-string (buffer-string) "\n" t))))
      (ivy-read "Open URL: " (remove-duplicates history-items :test #'string-equal)
                :keymap custom/open-url-map
                :action (lambda (item)
                          (start-process "vimb" nil "vimb" (car (split-string item (string ?\t))))))))

#+END_SRC

#+BEGIN_SRC conf :tangle ../../build/.config/vimb/config :noweb yes

# Set the home page to a local file
set home-page=file:///home/daviwil/.config/vimb/home.html

# Use home-row keys for hints
set hint-keys=asdfg;lkjh
set hint-match-element=false
set hint-keys-same-length=true
set hint-timeout=0

# Enable smooth scrolling
set smooth-scrolling=true

# Fake a Chromium User-Agent header
#set user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36
set user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36

# Set download directory
set download-path=~/downloads

# If enabled the inputbox will be hidden whenever it contains no text
set input-autohide=true

# Set the default zoom
set default-zoom=<<get-system-setting(name="vimb/default-zoom")>>

# Hint sites to use dark themes
set dark-mode=on

# Use Emacs as the external editor
set editor-command=emacsclient

# Enable support for WebGL
set webgl=true

# While typing a search command, show where the pattern typed so far matches.
set incsearch=true

# Enable developer tools (binding is gF)
set webinspector=true

# Turn off dark mode on some sites
au LoadCommitted https://outlook.office.com/* set dark-mode=off

# Keybindings
# - 'e' edits URL in current window
# - 'E' edits URL in new window
# - 'O' opens URL in new window
# - 'H' navigates back
# - 'L' navigates forward
# - 'D' closes the window
# - 'C-g' exits command and input mode
# - 'C-j' and 'C-k' move down and up command selections
nn e O
nn E T
nm O :tabopen<Space>
nn H <C-O>
nn L <C-I>
nm D :q<CR>
ino <C-G> <Esc>
cno <C-J> <Tab>
cno <C-K> <S-Tab>

# Zoom keys
nmap + zI
nmap - zO
nmap = zz

# Shortcuts
shortcut-add gn=https://github.com/notifications
shortcut-add dot=https://github.com/daviwil/dotfiles
shortcut-add ddg=https://duckduckgo.com/?q=$0
shortcut-add gh=https://github.com/$0
shortcut-add gm=https://www.iro.umontreal.ca/~gambit/doc/gambit.html
shortcut-add gam=https://github.com/gambit/gambit
shortcut-add zig=https://github.com/ziglang/zig
shortcut-add zigd=https://ziglang.org/documentation/master/
shortcut-add zigl=https://ziglang.org/documentation/master/std
shortcut-add sub=https://github.com/substratic/
shortcut-add sube=https://github.com/substratic/engine
shortcut-add subb=https://github.com/substratic/build
shortcut-add subf=https://github.com/substratic/forge
shortcut-add subc=https://github.com/substratic/crash-the-stack
shortcut-add tspl=https://scheme.com/tspl4/
shortcut-add mail=https://fastmail.com
shortcut-add cups=http://localhost:631
shortcut-add az=https://portal.azure.com
shortcut-add azdo=https://dev.azure.com/azure-sdk/
shortcut-add ajs=https://github.com/Azure/azure-sdk-for-js
shortcut-add dajs=https://github.com/daviwil/azure-sdk-for-js
shortcut-add anet=https://github.com/Azure/azure-sdk-for-net
shortcut-add aja=https://github.com/Azure/azure-sdk-for-java
shortcut-add apy=https://github.com/Azure/azure-sdk-for-python
shortcut-add ats=https://github.com/Azure/autorest.typescript
shortcut-add ats3=https://github.com/Azure/autorest.typescript.v3
shortcut-add atest=https://github.com/Azure/autorest.testserver
shortcut-add amf=https://github.com/Azure/autorest.modelerfour
shortcut-add ar=https://github.com/Azure/autorest
shortcut-add arpy=https://github.com/Azure/autorest.python
shortcut-add arc=https://github.com/Azure/autorest.csharp
shortcut-add are=https://github.com/Azure/autorest/tree/master/docs/extensions
shortcut-add arp=https://github.com/orgs/Azure/projects/48
shortcut-add ac=https://github.com/Azure/autorest.compare
shortcut-add ap=https://github.com/Azure/perks
shortcut-add specs=https://github.com/Azure/azure-rest-api-specs
shortcut-add oai2=https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
shortcut-add oai3=https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md
shortcut-add npm=https://www.npmjs.com/search?q=$0
shortcut-add oms=https://outlook.com/microsoft.com
shortcut-add msw=https://microsoft.sharepoint.com
shortcut-add man=https://fanglingsu.github.io/vimb/man.html

# A newline is needed at EOF because each line is executed like a command as if the user typed it and pressed Enter.

#+END_SRC

** Password Management

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "password-store"

#+END_SRC

*** Syncing Passwords

#+BEGIN_SRC sh :tangle ../../build/.local/bin/passwords-sync

  pass git pull
  pass git push

  notify-send -i "emblem-synchronizing" "Passwords synced!"

#+END_SRC

#+BEGIN_SRC scheme :tangle ../../build/.config/cron/passwords-sync.guile

  (job
     '(next-hour (range 0 24 4))
     "~/.local/bin/passwords-sync")

#+END_SRC

** Screen Locker

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "slock"

#+END_SRC

#+BEGIN_SRC shell :tangle ../../build/.local/bin/lock

  sudo slock
  gpg-connect-agent --no-autostart reloadagent /bye 2>/dev/null

#+END_SRC

** Audio Device Control

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "alsa-utils"
  "pavucontrol"

#+END_SRC

** Media Players
*** mpv

[[https://mpv.io/][mpv]] is a simple yet powerful video player.  Paired with [[http://ytdl-org.github.io/youtube-dl/][youtube-dl]] it can even stream YouTube videos.  [[https://github.com/hoyon/mpv-mpris][mpv-mpris]] allows playback control via [[https://github.com/altdesktop/playerctl][playerctl]].

~~/.config/mpv/mpv.conf~:

#+BEGIN_SRC conf :tangle ../../build/.config/mpv/mpv.conf :noweb yes

# Configure playback quality
vo=gpu
hwdec=vaapi
profile=gpu-hq
scale=ewa_lanczossharp
cscale=ewa_lanczossharp

# Start the window in the upper right screen corner
geometry=22%-30+20

# Save video position on quit
save-position-on-quit

# Enable control by MPRIS
script=~/.guix-extra-profiles/desktop/desktop/lib/mpris.so

# Limit the resolution of YouTube videos
ytdl=yes
ytdl-format=bestvideo[height<=?720]+bestaudio/best

# When playing audio files, display the album art
audio-display=attachment

# Keep the player open after the file finishes
keep-open

#+END_SRC

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "mpv"
  "mpv-mpris"
  "youtube-dl"
  "playerctl"

#+END_SRC

*** Codecs and Drivers

These packages are needed to enable many video formats to be played in browsers and video players.  VAAPI drivers are also used to enable hardware-accelerated video decoding.

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "gstreamer"
  "gst-plugins-base"
  "gst-plugins-good"
  "gst-plugins-bad"
  "gst-plugins-ugly"
  "gst-libav"
  "intel-vaapi-driver"
  "libva-utils"

#+END_SRC

** Image Viewers and Editors

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "sxiv"
  "feh"
  "gimp"

#+END_SRC

*** maim

#+BEGIN_SRC emacs-lisp

  (defun custom/screenshot ()
    (interactive)
    (case (completing-read "Type of screenshot:"
                           '("selected area"
                             "current window"
                             "full screen"
                             "selected area (copy)"
                             "current window (copy)"
                             "full screen (copy)"))
      ("selected area"         (shell-command "maim -s                                pic-selected-\"$(date '+%y%m%d-%H%M-%S').png\""))
      ("current window"        (shell-command "maim -i \"$(xdotool getactivewindow)\" pic-window-\"$(date '+%y%m%d-%H%M-%S').png\""))
      ("full screen"           (shell-command "maim                                   pic-full-\"$(date '+%y%m%d-%H%M-%S').png\""))
      ("selected area (copy)"  (shell-command "maim -s                                | xclip -selection clipboard -t image/png"))
      ("current window (copy)" (shell-command "maim -i \"$(xdotool getactivewindow)\" | xclip -selection clipboard -t image/png"))
      ("full screen (copy)"    (shell-command "maim                                   | xclip -selection clipboard -t image/png"))))

#+END_SRC

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "maim"

#+END_SRC

** Document Readers
*** Zathura

*Guix Packages*

#+BEGIN_SRC scheme :noweb-ref packages :noweb-sep ""

  "zathura"
  "zathura-pdf-mupdf"

#+END_SRC

#+BEGIN_SRC conf :tangle ../../build/.config/mimeapps.list

  [Default Applications]
  application/pdf=org.pwmt.zathura.desktop
  application/x-pdf=org.pwmt.zathura.desktop
  application/fdf=org.pwmt.zathura.desktop
  application/xdp=org.pwmt.zathura.desktop
  application/xfdf=org.pwmt.zathura.desktop
  application/pdx=org.pwmt.zathura.desktop

#+END_SRC

#+BEGIN_SRC conf :tangle ../../build/.config/zathura/zathurarc

  # Automatically adjust the document to full width
  set adjust-open width

  # Invert colors by default
  set recolor

  set selection-clipboard clipboard

  # Set minimal padding
  set statusbar-h-padding 0
  set statusbar-v-padding 0
  set page-padding 1

  # Set the title to the filename
  set window-title-basename true

  # Larger scroll steps with j/k
  set scroll-step 150

  # VIM-like
  map E adjust_window best-fit
  map e adjust_window width
  map u scroll half-up
  map d scroll half-down
  map D toggle_page_mode
  map R reload
  map r rotate
  map K zoom in
  map J zoom out
  map P print
  map i recolor
  map s toggle_statusbar
  map l display_link 
  map f follow
  map p goto

  # EMACS-like
  map <C-g> abort

  set default-fg "#ffffff"
  set default-bg "#000000"
  set inputbar-fg "#ffffff"
  set inputbar-bg "#000000"
  set statusbar-fg "#0000ff"
  set statusbar-bg "#000000"
  # set tabbar-fg "#000000"
  # set tabbar-bg "#000000"
  # set tabbar-focus-fg "#000000"
  # set tabbar-focus-bg "#000000"
  set index-fg "#ffffff"
  set index-bg "#000000"
  set index-active-fg "#000000"
  set index-active-bg "#ffff00"
  set completion-fg "#ffffff"
  set completion-bg "#000000"
  set completion-group-fg "#ffffff"
  set completion-group-bg "#000000"
  set completion-highlight-fg "#ffffff"
  set completion-highlight-bg "#000000"
  set highlight-color "#00ffff"
  set highlight-active-color "#ff00ff"
  set highlight-transparency 0.5
  set notification-fg "#ffffff"
  set notification-bg "#000000"
  set notification-warning-fg "#ffff00"
  set notification-warning-bg "#000000"
  set notification-error-fg "#ff0000"
  set notification-error-bg "#000000"
  # set scrollbar-fg "#ffffff"
  # set scrollbar-bg "#000000"
  # set guioptions s
  set font "monospace normal 7"

#+END_SRC

* Desktop Profile

The ~desktop.scm~ manifest holds the list of packages that I use to configure my desktop environment.  The package names are pulled from the relevant sections titled *Guix Packages* in this file (~Desktop.org~).

#+BEGIN_SRC makefile

.PHONY: desktop
desktop: desktop-activate ## @desktop-activate

.PHONY: desktop-activate
desktop-activate: ## Activate desktop profile.
	../../script/profiles-activate desktop

.PHONY: desktop-deactivate
desktop-deactivate: ## Deactivate desktop profile.
	../../script/profiles-deactivate desktop

.PHONY: desktop-update
desktop-update: ## Update desktop profile.
	../../script/profiles-update desktop

#+END_SRC

~~/.config/guix/manifests/desktop.scm~:

#+BEGIN_SRC scheme :tangle ../../build/.config/guix/manifests/desktop.scm :noweb yes

  (specifications->manifest
   '(
     <<packages>>
     ))

#+END_SRC

* Xorg Configuration
** Xdefaults

Set font =DPI=.

#+BEGIN_SRC conf-xdefaults

  Xft.dpi 100

#+END_SRC

#+BEGIN_SRC conf-xdefaults

  ,*.background:  #000000 // black
  ,*.foreground:  #FFFFFF // white
  ,*.cursorColor: #FFFF00 // yellow

#+END_SRC

#+BEGIN_SRC conf-xdefaults

  ,*.color0:   #000000 //        black    background
  ,*.color1:   #7F0000 // dark   red      not used
  ,*.color2:   #007F00 // dark   green    comment
  ,*.color3:   #FF7F00 //        orange   WARNING
  ,*.color4:   #0000FF // dark   blue     not used
  ,*.color5:   #7F007F // dark   magenta  not used
  ,*.color6:   #007F7F // dark   cyan     "function"
  ,*.color7:   #EFEFEF // dark   grey     inactive
  ,*.color8:   #7F7F7F // bright grey     inactive
  ,*.color9:   #FF0000 // bright red      DANGER, error, first accent, string
  ,*.color10:  #00FF00 // bright green    SAFETY INSTRUCTIONS, OK, success, command
  ,*.color11:  #FFFF00 // bright yellow   CAUTION, second accent, cursor, selected
  ,*.color12:  #2D2EFF // bright blue     NOTICE, dim information
  ,*.color13:  #FF00FF // bright magenta  current node
  ,*.color14:  #00FFFF // bright cyan     other nodes, link
  ,*.color15:  #FFFFFF // bright white    foreground, basic

#+END_SRC

** RandR
** Xsession

Source .profile for common environment vars.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  source $HOME/.profile

#+END_SRC

Load Xdefaults.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  xrdb $XDG_CONFIG_HOME/Xresources

#+END_SRC

Disable access control for the current user.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  xhost +SI:localuser:$USER

#+END_SRC

Make Java applications aware this is a non-reparenting window manager.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  export _JAVA_AWT_WM_NONREPARENTING=1

#+END_SRC

Start Shepherd to manage user daemons.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  if [ -z "$(pgrep -u $USER shepherd)" ]; then
      shepherd
  fi

#+END_SRC

Run xsettingsd to progagate font and theme settings.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  xsettingsd &

#+END_SRC

Enable screen compositing.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  picom &

#+END_SRC

Turn off the system bell.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  xset -b

#+END_SRC

Enable screen locking on suspend.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  xss-lock -- lock &

#+END_SRC

Load keyboard layout into X.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  xkbcomp -I$XDG_CONFIG_HOME/xkb $XDG_CONFIG_HOME/xkb/keymap.xkb $DISPLAY
  xcaper &

#+END_SRC

Launch EXWM or fallback to Xterm.

#+BEGIN_SRC shell :tangle ../../build/.xsession

  dbus-launch --exit-with-session \
       emacs --debug-init \
	     --maximized \
	     --background-color "#000000" \
	     --use-exwm \
       && exit \
       || xterm -maximized -bg "#000000" -fg "#FFFFFF"

#+END_SRC

* Provide the custom-desktop package

#+BEGIN_SRC emacs-lisp

  (provide 'custom-desktop)

#+END_SRC

* Notes
** Bluetooth Setup

If you need to manually connect to Bluetooth audio devices using =bluetoothctl=,
as I currently do in Guix, you'll need to enter these commands at the
=bluetoothctl= prompt:

#+BEGIN_SRC shell

  system-alias "my-hostname" # To configure your laptop's device name
  default-agent
  power on
  scan on
  # Wait for your device to appear
  pair 04:52:C7:5E:5C:A8
  trust 04:52:C7:5E:5C:A8 # To enable auto-connect
  connect 04:52:C7:5E:5C:A8

#+END_SRC
