#+TITLE: Keyboard Configuration
#+AUTHOR: Comrade Martin Miroslavovich Michalec

#+STARTUP: overview
#+PROPERTY: header-args:conf-unix :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:shell     :tangle-mode (identity #o555) :mkdirp yes :shebang "#!/bin/sh"

* Foreword

I use Colemak DHk with US-ish layout, Wide and Angle Z mods on ISO keyboards and
W-Shift on ANSI and some custom additions.

I really only use Lenovo keyboards with switched "bite" keys, more specitically ISO/ANSI on
X220/X230 and I also have external X230 like keyboard that I carry
with myselt everywhere.  However, GergoPlex is on it's way to Slovakia...

* Console
** ISO

#+begin_src conf-unix :tangle ../build/.config/kmap/colemak_custom_iso.kmap

  alt_is_meta
  charset "iso-8859-15"  # use a ISO-8859-15 font, e.g.: consolechars -f lat9v-14
  keymaps 0-12
  include "qwerty-layout"
  include "linux-with-alt-and-altgr"
  strings as usual

  keycode 41 = grave         asciitilde   dead_tilde       asciitilde     nul
  keycode  2 = one           exclam       exclamdown       onesuperior
  keycode  3 = two           at           masculine        twosuperior    nul
  keycode  4 = three         numbersign   ordfeminine      threesuperior  Escape
  keycode  5 = four          dollar       cent             sterling       Control_backslash
  keycode  6 = five          percent      euro             yen            Control_bracketright
  keycode  7 = equal         plus         multiply         division
  keycode  8 = six           asciicircum  hstroke          Hstroke        Control_asciicircum
  keycode  9 = seven         ampersand    eth              ETH            Control_underscore
  keycode 10 = eight         asterisk     thorn            THORN          Delete
  keycode 11 = nine          parenleft    asciitilde       asciitilde
  keycode 12 = zero          parenright   asciitilde       asciitilde
  keycode 13 = numbersign    asciitilde   dead_circumflex  asciitilde

  keycode 16 = q             Q            adiaeresis       Adiaeresis     Control_q
  keycode 17 = w             W            aring            Aring          Control_w
  keycode 18 = f             F            atilde           Atilde         Control_f
  keycode 19 = p             P            oslash           Ooblique       Control_p
  keycode 20 = b             B            asciitilde       asciitilde     Control_b
  keycode 21 = bracketleft   braceleft    asciitilde       0x1002039      Escape
  keycode 22 = j             J            asciitilde       asciitilde     Control_j
  keycode 23 = l             L            asciitilde       asciitilde     Control_l
  keycode 24 = u             U            uacute           Uacute         Control_u
  keycode 25 = y             Y            udiaeresis       Udiaeresis     Control_y
  keycode 26 = semicolon     colon        odiaeresis       Odiaeresis
  keycode 27 = minus         underscore   asciitilde       asciitilde     Control_underscore

  keycode 30 = a             A            aacute           Aacute         Control_a
  keycode 31 = r             R            dead_grave       asciitilde     Control_r
  keycode 32 = s             S            ssharp           asciitilde     Control_s
  keycode 33 = t             T            asciitilde       asciitilde     Control_t
  keycode 34 = g             G            asciitilde       asciitilde     Control_g
  keycode 35 = bracketright  braceright   asciitilde       0x100203a      Control_bracketright
  keycode 36 = k             K            asciitilde       asciitilde     Control_k
  keycode 37 = n             N            ntilde           Ntilde         Control_n
  keycode 38 = e             E            eacute           Eacute         Control_e
  keycode 39 = i             I            iacute           Iacute         Control_i
  keycode 40 = o             O            oacute           Oacute         Control_o
  keycode 43 = apostrophe    quotedbl     otilde           Otilde

  keycode 86 = z             Z            ae               AE             Control_z
  keycode 44 = x             X            dead_circumflex  asciitilde     Control_x
  keycode 45 = c             C            ccedilla         Ccedilla       Control_c
  keycode 46 = d             D            dead_diaeresis   asciitilde     Control_d
  keycode 47 = v             V            oe               OE             Control_v
  keycode 48 = backslash     bar          asciitilde       asciitilde     Control_backslash
  keycode 49 = slash         question     questiondown     asciitilde     Delete
  keycode 50 = m             M            asciitilde       asciitilde     Control_m
  keycode 51 = h             H            asciitilde       asciitilde     Control_h
  keycode 52 = comma         less         dead_cedilla     asciitilde
  keycode 53 = period        greater      asciitilde       asciitilde

  keycode 57 = space         space        space            nobreakspace   nul

  ! CapsLock -> Control
  keycode 58 = Control

  ! AltGr -> BackSpace
  keycode 100 = BackSpace

      keycode  1 = Escape
      keycode 14 = Delete
      keycode 15 = Tab
      keycode 28 = Return
  alt keycode 28 = Meta_Control_m
      keycode 29 = Control
      keycode 42 = Shift
      keycode 54 = Shift
      keycode 56 = Alt
      keycode 97 = Control

#+end_src

*** ANSI

#+begin_src conf-unix :tangle ../build/.config/kmap/colemak_custom_ansi.kmap

  alt_is_meta
  charset "iso-8859-15"  # use a ISO-8859-15 font, e.g.: consolechars -f lat9v-14
  keymaps 0-12
  include "qwerty-layout"
  include "linux-with-alt-and-altgr"
  strings as usual

  keycode  41  =  grave         asciitilde   dead_tilde       asciitilde     nul
  keycode  2   =  minus         underscore   asciitilde       asciitilde     Control_underscore
  keycode  3   =  one           exclam       exclamdown       onesuperior
  keycode  4   =  two           at           masculine        twosuperior    nul
  keycode  5   =  three         numbersign   ordfeminine      threesuperior  Escape
  keycode  6   =  four          dollar       cent             sterling       Control_backslash
  keycode  7   =  five          percent      euro             yen            Control_bracketright
  keycode  8   =  six           asciicircum  hstroke          Hstroke        Control_asciicircum
  keycode  9   =  seven         ampersand    eth              ETH            Control_underscore
  keycode  10  =  eight         asterisk     thorn            THORN          Delete
  keycode  11  =  nine          parenleft    asciitilde       asciitilde
  keycode  12  =  zero          parenright   asciitilde       asciitilde
  keycode  13  =  equal         plus         multiply         division

  keycode  16  =  bracketleft   braceleft    asciitilde       0x1002039      Escape
  keycode  17  =  q             Q            adiaeresis       Adiaeresis     Control_q
  keycode  18  =  w             W            aring            Aring          Control_w
  keycode  19  =  f             F            atilde           Atilde         Control_f
  keycode  20  =  p             P            oslash           Ooblique       Control_p
  keycode  21  =  b             B            asciitilde       asciitilde     Control_b
  keycode  22  =  j             J            asciitilde       asciitilde     Control_j
  keycode  23  =  l             L            asciitilde       asciitilde     Control_l
  keycode  24  =  u             U            uacute           Uacute         Control_u
  keycode  25  =  y             Y            udiaeresis       Udiaeresis     Control_y
  keycode  26  =  semicolon     colon        odiaeresis       Odiaeresis
  keycode  27  =  apostrophe    quotedbl     otilde           Otilde
  keycode  43  =  backslash     bar          asciitilde       asciitilde     Control_backslash

  keycode  30  =  bracketright  braceright   asciitilde       0x100203a      Control_bracketright
  keycode  31  =  a             A            aacute           Aacute         Control_a
  keycode  32  =  r             R            dead_grave       asciitilde     Control_r
  keycode  33  =  s             S            ssharp           asciitilde     Control_s
  keycode  34  =  t             T            asciitilde       asciitilde     Control_t
  keycode  35  =  g             G            asciitilde       asciitilde     Control_g
  keycode  36  =  k             K            asciitilde       asciitilde     Control_k
  keycode  37  =  n             N            ntilde           Ntilde         Control_n
  keycode  38  =  e             E            eacute           Eacute         Control_e
  keycode  39  =  i             I            iacute           Iacute         Control_i
  keycode  40  =  o             O            oacute           Oacute         Control_o

  keycode  86  =  minus         underscore   asciitilde       asciitilde     Control_underscore
  keycode  44  =  z             Z            ae               AE             Control_z
  keycode  45  =  x             X            dead_circumflex  asciitilde     Control_x
  keycode  46  =  c             C            ccedilla         Ccedilla       Control_c
  keycode  47  =  d             D            dead_diaeresis   asciitilde     Control_d
  keycode  48  =  v             V            oe               OE             Control_v
  keycode  49  =  slash         question     questiondown     asciitilde     Delete
  keycode  50  =  m             M            asciitilde       asciitilde     Control_m
  keycode  51  =  h             H            asciitilde       asciitilde     Control_h
  keycode  52  =  comma         less         dead_cedilla     asciitilde
  keycode  53  =  period        greater      asciitilde       asciitilde

  keycode  57  =  space         space        space            nobreakspace   nul

  ! Remove this line if you want caps lock unmodified
  keycode  58 =    BackSpace     BackSpace        BackSpace         BackSpace

  keycode   1 = Escape
  keycode  14 = Delete
  keycode  15 = Tab
  keycode  28 = Return
          alt     keycode  28 = Meta_Control_m
  keycode  29 = Control
  keycode  42 = Shift
  keycode  54 = Shift
  keycode  56 = Alt
  keycode  97 = Control

#+end_src

* XKB

#+begin_src conf-javaprop :tangle ../build/.config/xkb/keymap.xkb :tangle-mode (identity #o444) :mkdirp yes :noweb yes

  xkb_keymap
  {
     xkb_keycodes {
        <<xkb_keycodes>>
     };
     xkb_types {
        <<xkb_types>>
     };
     xkb_compat {
        <<xkb_compat>>
     };
     xkb_symbols {
        <<xkb_symbols>>
     };
     xkb_geometry {
        <<xkb_geometry>>
     };
  };

#+end_src

** Keycodes

#+NAME: xkb_keycodes
#+begin_src conf-javaprop

  minimum = 8;
  maximum = 255;

  # Added for pc105 compatibility
  <LSGT> = 94;

  <TLDE> = 49;
  <AE01> = 10;
  <AE02> = 11;
  <AE03> = 12;
  <AE04> = 13;
  <AE05> = 14;
  <AE06> = 15;
  <AE07> = 16;
  <AE08> = 17;
  <AE09> = 18;
  <AE10> = 19;
  <AE11> = 20;
  <AE12> = 21;
  <BKSP> = 22;

  <TAB> = 23;
  <AD01> = 24;
  <AD02> = 25;
  <AD03> = 26;
  <AD04> = 27;
  <AD05> = 28;
  <AD06> = 29;
  <AD07> = 30;
  <AD08> = 31;
  <AD09> = 32;
  <AD10> = 33;
  <AD11> = 34;
  <AD12> = 35;
  <BKSL> = 51;
  alias <AC12> = <BKSL>;
  <RTRN> = 36;

  <CAPS> = 66;
  <AC01> = 38;
  <AC02> = 39;
  <AC03> = 40;
  <AC04> = 41;
  <AC05> = 42;
  <AC06> = 43;
  <AC07> = 44;
  <AC08> = 45;
  <AC09> = 46;
  <AC10> = 47;
  <AC11> = 48;

  <LFSH> = 50;
  <AB01> = 52;
  <AB02> = 53;
  <AB03> = 54;
  <AB04> = 55;
  <AB05> = 56;
  <AB06> = 57;
  <AB07> = 58;
  <AB08> = 59;
  <AB09> = 60;
  <AB10> = 61;
  <RTSH> = 62;

  <LALT> = 64;
  <LCTL> = 37;
  <SPCE> = 65;
  <RCTL> = 105;
  <RALT> = 108;
  // Microsoft keyboard extra keys
  <LWIN> = 133;
  <RWIN> = 134;
  <COMP> = 135;
  alias <MENU> = <COMP>;

  <ESC> = 9;
  <FK01> = 67;
  <FK02> = 68;
  <FK03> = 69;
  <FK04> = 70;
  <FK05> = 71;
  <FK06> = 72;
  <FK07> = 73;
  <FK08> = 74;
  <FK09> = 75;
  <FK10> = 76;
  <FK11> = 95;
  <FK12> = 96;

  <PRSC> = 107;
  // <SYRQ> = 107;
  <SCLK> = 78;
  <PAUS> = 127;
  // <BRK> = 419;

  <INS> = 118;
  <HOME> = 110;
  <PGUP> = 112;
  <DELE> = 119;
  <END> = 115;
  <PGDN> = 117;

  <UP> = 111;
  <LEFT> = 113;
  <DOWN> = 116;
  <RGHT> = 114;

  <NMLK> = 77;
  <KPDV> = 106;
  <KPMU> = 63;
  <KPSU> = 82;

  <KP7> = 79;
  <KP8> = 80;
  <KP9> = 81;
  <KPAD> = 86;

  <KP4> = 83;
  <KP5> = 84;
  <KP6> = 85;

  <KP1> = 87;
  <KP2> = 88;
  <KP3> = 89;
  <KPEN> = 104;

  <KP0> = 90;
  <KPDL> = 91;
  <KPEQ> = 125;

  <FK13> = 191;
  <FK14> = 192;
  <FK15> = 193;
  <FK16> = 194;
  <FK17> = 195;
  <FK18> = 196;
  <FK19> = 197;
  <FK20> = 198;
  <FK21> = 199;
  <FK22> = 200;
  <FK23> = 201;
  <FK24> = 202;

  // Extended keys that may be generated on "Internet" keyboards.
  // evdev has standardize names for these.

  <LNFD> = 109;	// #define KEY_LINEFEED            101
  <I120> = 120;	// #define KEY_MACRO               112
  <I126> = 126;	// #define KEY_KPPLUSMINUS         118
  <I128> = 128;   // #define KEY_SCALE               120
  <I129> = 129;	// #define KEY_KPCOMMA             121
  <I147> = 147;	// #define KEY_MENU                139
  <I148> = 148;	// #define KEY_CALC                140
  <I149> = 149;	// #define KEY_SETUP               141
  <I150> = 150;	// #define KEY_SLEEP               142
  <I151> = 151;	// #define KEY_WAKEUP              143
  <I152> = 152;	// #define KEY_FILE                144
  <I153> = 153;	// #define KEY_SENDFILE            145
  <I154> = 154;	// #define KEY_DELETEFILE          146
  <I155> = 155;	// #define KEY_XFER                147
  <I156> = 156;	// #define KEY_PROG1               148
  <I157> = 157;	// #define KEY_PROG2               149
  <I158> = 158;	// #define KEY_WWW                 150
  <I159> = 159;	// #define KEY_MSDOS               151
  <I160> = 160;	// #define KEY_COFFEE              152
  <I161> = 161;	// #define KEY_DIRECTION           153
  <I162> = 162;	// #define KEY_CYCLEWINDOWS        154
  <I163> = 163;	// #define KEY_MAIL                155
  <I164> = 164;	// #define KEY_BOOKMARKS           156
  <I165> = 165;	// #define KEY_COMPUTER            157
  <I166> = 166;	// #define KEY_BACK                158
  <I167> = 167;	// #define KEY_FORWARD             159
  <I168> = 168;	// #define KEY_CLOSECD             160
  <I169> = 169;	// #define KEY_EJECTCD             161
  <I170> = 170;	// #define KEY_EJECTCLOSECD        162
  <I171> = 171;	// #define KEY_NEXTSONG            163
  <I172> = 172;	// #define KEY_PLAYPAUSE           164
  <I173> = 173;	// #define KEY_PREVIOUSSONG        165
  <I174> = 174;	// #define KEY_STOPCD              166
  <I175> = 175;	// #define KEY_RECORD              167
  <I176> = 176;	// #define KEY_REWIND              168
  <I177> = 177;	// #define KEY_PHONE               169
  <I178> = 178;	// #define KEY_ISO                 170
  <I179> = 179;	// #define KEY_CONFIG              171
  <I180> = 180;	// #define KEY_HOMEPAGE            172
  <I181> = 181;	// #define KEY_REFRESH             173
  <I182> = 182;	// #define KEY_EXIT                174
  <I183> = 183;	// #define KEY_MOVE                175
  <I184> = 184;	// #define KEY_EDIT                176
  <I185> = 185;	// #define KEY_SCROLLUP            177
  <I186> = 186;	// #define KEY_SCROLLDOWN          178
  <I187> = 187;	// #define KEY_KPLEFTPAREN         179
  <I188> = 188;	// #define KEY_KPRIGHTPAREN        180
  <I189> = 189;	// #define KEY_NEW                 181
  <I190> = 190;	// #define KEY_REDO                182
  <I208> = 208;	// #define KEY_PLAYCD              200
  <I209> = 209;	// #define KEY_PAUSECD             201
  <I210> = 210;	// #define KEY_PROG3               202
  <I211> = 211;	// #define KEY_PROG4               203 conflicts with AB11
  <I212> = 212;   // #define KEY_DASHBOARD           204
  <I213> = 213;	// #define KEY_SUSPEND             205
  <I214> = 214;	// #define KEY_CLOSE               206
  <I215> = 215;	// #define KEY_PLAY                207
  <I216> = 216;	// #define KEY_FASTFORWARD         208
  <I217> = 217;	// #define KEY_BASSBOOST           209
  <I218> = 218;	// #define KEY_PRINT               210
  <I219> = 219;	// #define KEY_HP                  211
  <I220> = 220;	// #define KEY_CAMERA              212
  <I221> = 221;	// #define KEY_SOUND               213
  <I222> = 222;	// #define KEY_QUESTION            214
  <I223> = 223;	// #define KEY_EMAIL               215
  <I224> = 224;	// #define KEY_CHAT                216
  <I225> = 225;	// #define KEY_SEARCH              217
  <I226> = 226;	// #define KEY_CONNECT             218
  <I227> = 227;	// #define KEY_FINANCE             219
  <I228> = 228;	// #define KEY_SPORT               220
  <I229> = 229;	// #define KEY_SHOP                221
  <I230> = 230;	// #define KEY_ALTERASE            222
  <I231> = 231;	// #define KEY_CANCEL              223
  <I232> = 232;	// #define KEY_BRIGHTNESSDOWN      224
  <I233> = 233;	// #define KEY_BRIGHTNESSUP        225
  <I234> = 234;	// #define KEY_MEDIA               226
  <I235> = 235;	// #define KEY_SWITCHVIDEOMODE     227
  <I236> = 236;	// #define KEY_KBDILLUMTOGGLE      228
  <I237> = 237;	// #define KEY_KBDILLUMDOWN        229
  <I238> = 238;	// #define KEY_KBDILLUMUP          230
  <I239> = 239;	// #define KEY_SEND                231
  <I240> = 240;	// #define KEY_REPLY               232
  <I241> = 241;	// #define KEY_FORWARDMAIL         233
  <I242> = 242;	// #define KEY_SAVE                234
  <I243> = 243;	// #define KEY_DOCUMENTS           235
  <I244> = 244;	// #define KEY_BATTERY             236
  <I245> = 245;	// #define KEY_BLUETOOTH           237
  <I246> = 246;	// #define KEY_WLAN                238
  <I247> = 247;	// #define KEY_UWB                 239
  <I248> = 248;	// #define KEY_UNKNOWN             240
  <I249> = 249;	// #define KEY_VIDEO_NEXT          241
  <I250> = 250;	// #define KEY_VIDEO_PREV          242
  <I251> = 251;	// #define KEY_BRIGHTNESS_CYCLE    243
  <I252> = 252;	// #define KEY_BRIGHTNESS_ZERO     244
  <I253> = 253;	// #define KEY_DISPLAY_OFF         245
  <I254> = 254;	// #define KEY_WWAN                246
  <I255> = 255;	// #define KEY_RFKILL              247

  <I372> = 372;   // #define KEY_FAVORITES           364
  <I380> = 380;   // #define KEY_FULL_SCREEN         372
  <I382> = 382;   // #define KEY_KEYBOARD            374
  <I442> = 442;   // #define KEY_DOLLAR              434
  <I443> = 443;   // #define KEY_EURO                435
  <I569> = 569;   // #define KEY_ROTATE_LOCK_TOGGLE  561

  // Fake keycodes for virtual keys
  <LVL3> =   92;
  <MDSW> =   203;
  <ALT>  =   204;
  <META> =   205;
  <SUPR> =   206;
  <HYPR> =   207;

  indicator 1  = "Caps Lock";
  indicator 2  = "Num Lock";
  indicator 3  = "Scroll Lock";
  indicator 4  = "Compose";
  indicator 5  = "Kana";
  indicator 6  = "Sleep";
  indicator 7  = "Suspend";
  indicator 8  = "Mute";
  indicator 9  = "Misc";
  indicator 10 = "Mail";
  indicator 11 = "Charging";

  alias <ALGR> = <RALT>;

  alias <QK1> = <AE01>;
  alias <QK2> = <AE02>;
  alias <QK3> = <AE03>;
  alias <QK4> = <AE04>;
  alias <QK5> = <AE05>;
  alias <QK6> = <AE06>;
  alias <QK7> = <AE07>;
  alias <QK8> = <AE08>;
  alias <QK9> = <AE09>;
  alias <QK0> = <AE10>;

  alias <QKQ> = <AD01>;
  alias <QKW> = <AD02>;
  alias <QKE> = <AD03>;
  alias <QKR> = <AD04>;
  alias <QKT> = <AD05>;
  alias <QKY> = <AD06>;
  alias <QKU> = <AD07>;
  alias <QKI> = <AD08>;
  alias <QKO> = <AD09>;
  alias <QKP> = <AD10>;

  alias <QKA> = <AC01>;
  alias <QKS> = <AC02>;
  alias <QKD> = <AC03>;
  alias <QKF> = <AC04>;
  alias <QKG> = <AC05>;
  alias <QKH> = <AC06>;
  alias <QKJ> = <AC07>;
  alias <QKK> = <AC08>;
  alias <QKL> = <AC09>;

  alias <QKZ> = <AB01>;
  alias <QKX> = <AB02>;
  alias <QKC> = <AB03>;
  alias <QKV> = <AB04>;
  alias <QKB> = <AB05>;
  alias <QKN> = <AB06>;
  alias <QKM> = <AB07>;

#+end_src

** Types

#+NAME: xkb_types
#+begin_src conf-javaprop

  include "complete"

#+end_src

** Compat

#+NAME: xkb_compat
#+begin_src conf-javaprop

  include "complete"
  include "ledcaps(group_lock)"

#+end_src

** Symbols

#+NAME: xkb_symbols
#+begin_src conf-javaprop

  include "pc+custom(iso)+inet(evdev)"

#+end_src

#+begin_src conf-javaprop :tangle ../build/.config/xkb/symbols/custom :tangle-mode (identity #o444) :mkdirp yes

  default partial alphanumeric_keys modifier_keys

  xkb_symbols "base" {
      name[Group1] = "Latin (custom)";
      name[Group2] = "Cyrillic (custom)";
    
      key.type = "ONE_LEVEL";
      key <PAUS> { [ ISO_Next_Group ] };

      key.type = "EIGHT_LEVEL_SEMIALPHABETIC"; 
  //               [ None              , S                 , L3               , S+L3            , L5               , S+L5             , L3+L5            , S+L3+L5          ]
      key <TLDE> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_io       , Cyrillic_IO       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE01> { [ q                 , Q                 , at               , U21CD           , Prior            , Prior            , Greek_omicron    , Greek_OMICRON    ]
                 , [ 1                 , exclam            , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE02> { [ w                 , W                 , underscore       , U21A4           , BackSpace        , BackSpace        , Greek_omega      , Greek_OMEGA      ]
                 , [ 2                 , quotedbl          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE03> { [ f                 , F                 , bracketleft      , U2191           , Up               , Up               , Greek_phi        , Greek_PHI        ]
                 , [ 3                 , numbersign        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE04> { [ p                 , P                 , bracketright     , U21A6           , Delete           , Delete           , Greek_pi         , Greek_PI         ]
                 , [ 4                 , asterisk          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE05> { [ b                 , B                 , asciicircum      , U21CF           , Next             , Next             , Greek_beta       , Greek_BETA       ]
                 , [ 5                 , colon             , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE06> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ 6                 , comma             , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE07> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ 7                 , period            , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE08> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ 8                 , semicolon         , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE09> { [ j                 , J                 , exclam           , U2260           , NoSymbol         , NoSymbol         , Greek_SIGMA      , NoSymbol         ]
                 , [ 9                 , parenleft         , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE10> { [ l                 , L                 , less             , U2A7D           , 1                , A                , Greek_lambda     , Greek_LAMBDA     ]
                 , [ 0                 , parenright        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE11> { [ u                 , U                 , greater          , U2A7E           , 2                , B                , Greek_upsilon    , Greek_UPSILON    ]
                 , [ minus             , underscore        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AE12> { [ y                 , Y                 , equal            , U2261           , 3                , C                , Greek_psi        , Greek_PSI        ]
                 , [ equal             , plus              , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <BKSP> { [ NoSymbol          , NoSymbol          , ampersand        , U2248           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ BackSpace         , BackSpace         , BackSpace        , U2620           , BackSpace        , BackSpace        , BackSpace        , BackSpace        ] };

      key <TAB>  { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD01> { [ a                 , A                 , slash            , U21D0           , Home             , Home             , Greek_alpha      , Greek_ALPHA      ]
                 , [ Cyrillic_shorti   , Cyrillic_SHORTI   , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD02> { [ r                 , R                 , minus            , U2190           , Left             , Left             , Greek_rho        , Greek_RHO        ]
                 , [ Cyrillic_tse      , Cyrillic_TSE      , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD03> { [ s                 , S                 , braceleft        , U2193           , Down             , Down             , Greek_sigma      , Greek_SIGMA      ]
                 , [ Cyrillic_u        , Cyrillic_U        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD04> { [ t                 , T                 , braceright       , U2192           , Right            , Right            , Greek_tau        , Greek_TAU        ]
                 , [ Cyrillic_ka       , Cyrillic_KA       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD05> { [ g                 , G                 , asterisk         , U21D2           , End              , End              , Greek_gamma      , Greek_GAMMA      ]
                 , [ Cyrillic_ie       , Cyrillic_IE       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD06> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_en       , Cyrillic_EN       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD07> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_ghe      , Cyrillic_GHE      , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD08> { [ k                 , K                 , question         , U2286           , period           , colon            , Greek_kappa      , Greek_KAPPA      ]
                 , [ Cyrillic_sha      , Cyrillic_SHA      , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD09> { [ n                 , N                 , parenleft        , U2227           , 4                , D                , Greek_eta        , Greek_ETA        ]
                 , [ Cyrillic_shcha    , Cyrillic_SHCHA    , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD10> { [ e                 , E                 , parenright       , U2228           , 5                , E                , Greek_epsilon    , Greek_EPSILON    ]
                 , [ Cyrillic_ze       , Cyrillic_ZE       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD11> { [ i                 , I                 , apostrophe       , U2200           , 6                , F                , Greek_iota       , Greek_IOTA       ]
                 , [ Cyrillic_ha       , Cyrillic_HA       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AD12> { [ o                 , O                 , colon            , U2203           , NoSymbol         , NoSymbol         , Greek_omega      , Greek_OMEGA      ]
                 , [ Cyrillic_hardsign , Cyrillic_HARDSIGN , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };

      key <CAPS> { [ z                 , Z                 , numbersign       , U21AE           , slash            , NoSymbol         , Greek_zeta       , Greek_ZETA       ]
                 , [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC01> { [ x                 , X                 , dollar           , U2194           , asterisk         , NoSymbol         , Greek_xi         , Greek_XI         ]
                 , [ Cyrillic_ef       , Cyrillic_EF       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC02> { [ c                 , C                 , bar              , U21CE           , minus            , NoSymbol         , Greek_chi        , Greek_CHI        ]
                 , [ Cyrillic_yeru     , Cyrillic_YERU     , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC03> { [ d                 , D                 , asciitilde       , U21D4           , plus             , NoSymbol         , Greek_delta      , Greek_DELTA      ]
                 , [ Cyrillic_ve       , Cyrillic_VE       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC04> { [ v                 , V                 , grave            , U2282           , comma            , NoSymbol         , Greek_nu         , Greek_NU         ]
                 , [ Cyrillic_a        , Cyrillic_A        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC05> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_pe       , Cyrillic_PE       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC06> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_er       , Cyrillic_ER       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC07> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_o        , Cyrillic_O        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC08> { [ m                 , M                 , plus             , U2229           , NoSymbol         , NoSymbol         , Greek_mu         , Greek_MU         ]
                 , [ Cyrillic_el       , Cyrillic_EL       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC09> { [ h                 , H                 , percent          , U222A           , 7                , parenleft        , Greek_theta      , Greek_THETA      ]
                 , [ Cyrillic_de       , Cyrillic_DE       , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC10> { [ comma             , colon             , backslash        , U2208           , 8                , parenright       , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_zhe      , Cyrillic_ZHE      , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC11> { [ period            , semicolon         , quotedbl         , U2209           , 9                , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_e        , Cyrillic_E        , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AC12> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , 0                , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ NoSymbol          , NoSymbol          , NoSymbol         , U2620           , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };

      key <LSGT> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ slash             , bar               , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB01> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_ya       , Cyrillic_YA       , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB02> { [ Control_L         , Control_L         , Control_L        , Control_L        , Control_L        , Control_L        , Control_L        , Control_L        ] // Xcape: Escape
                 , [ Cyrillic_che      , Cyrillic_CHE      , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , vmods[Group1] = Control
                 , actions[Group1] = [ SetMods(modifiers=Control) ] };
      key <AB03> { [ ISO_Level5_Shift  , ISO_Level5_Shift  , ISO_Level5_Shift , ISO_Level5_Shift , ISO_Level5_Shift , ISO_Level5_Shift , ISO_Level5_Shift , ISO_Level5_Shift ] // Xcape: Space
                 , [ Cyrillic_es       , Cyrillic_ES       , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB04> { [ Meta_L            , Meta_L            , Meta_L           , Meta_L           , Meta_L           , Meta_L           , Meta_L           , Meta_L           ] // Xcape: Tab
                 , [ Cyrillic_em       , Cyrillic_EM       , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB05> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_i        , Cyrillic_I        , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB06> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ Cyrillic_te       , Cyrillic_TE       , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB07> { [ Super_L           , Super_L           , Super_L          , Super_L          , Super_L          , Super_L          , Super_L          , Super_L          ] // Xcape: BackSpace
                 , [ Cyrillic_softsign , Cyrillic_SOFTSIGN , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB08> { [ ISO_Level3_Shift  , ISO_Level3_Shift  , ISO_Level3_Shift , ISO_Level3_Shift , ISO_Level3_Shift , ISO_Level3_Shift , ISO_Level3_Shift , ISO_Level3_Shift ] // Xcape: Return
                 , [ Cyrillic_be       , Cyrillic_BE       , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB09> { [ Shift_L           , Shift_L           , Shift_L          , Shift_L          , Shift_L          , Shift_L          , Shift_L          , Shift_L          ] // Xcape: Delete
                 , [ Cyrillic_yu       , Cyrillic_YU       , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
      key <AB10> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ slash             , question          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };

      include "level5(modifier_mapping)"
  };

  xkb_symbols "iso" {
      include "custom(base)"
  };

  xkb_symbols "ansi" {
      include "custom(base)"

      key.type[Group1] = "EIGHT_LEVEL_SEMIALPHABETIC"; 
      key <RTRN> { [ o                 , O                 , colon            , U2203            , NoSymbol         , NoSymbol         , Greek_omega      , Greek_OMEGA      ] };
      key <BKSL> { [ NoSymbol          , NoSymbol          , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ]
                 , [ backslash         , bar               , NoSymbol         , U2620            , NoSymbol         , NoSymbol         , NoSymbol         , NoSymbol         ] };
  };

#+end_src

** Geometry

#+NAME: xkb_geometry
#+begin_src conf-javaprop

  include "pc(pc105)"

#+end_src

** Xcape

#+begin_src shell :tangle ../build/.local/bin/xcaper

  while :; do
  	killall -q xcape
  	if xkb-switch -p; then
  		xcape -t 150 -e "Control_L=Escape;ISO_Level5_Shift=space;Meta_L=Tab;Super_L=BackSpace;ISO_Level3_Shift=Return;Shift_L=Delete"
  	fi
  	xkb-switch -w >/dev/null
  done

#+end_src

* AutoHotKey (AHK)
** ISO

#+begin_src 

  ; Colemak Mod-DH wide mapping for ISO boards
  
  ;SC002::1
  ;SC003::2
  ;SC004::3
  ;SC005::4
  ;SC006::5
  SC007::=
  SC008::6
  SC009::7
  SC00a::8
  SC00b::9
  SC00c::0
  SC00d::-
  
  ;SC010::q
  ;SC011::w
  SC012::f
  SC013::p
  SC014::b
  SC016::j
  SC015::[
  SC017::l
  SC018::u
  SC019::y
  SC01A::;
  SC01B::#
  
  ;SC01E::a
  SC01F::r
  SC020::s
  SC021::t
  SC022::g
  SC023::]
  SC024::k
  SC025::n
  SC026::e
  SC027::i
  SC028::o
  SC02B::'
  
  SC056::z
  SC02c::x
  SC02d::c
  SC02e::d
  ;SC02f::v
  SC030::\
  SC031::/
  SC032::m
  SC033::h
  SC034::,
  SC035::.
  
  ; set Backspace to CapsLock key
  SC03a::backspace

#+end_src

** ANSI

#+begin_src c :tangle ../build/.config/ahk/custom_ansi.ahk

  #Persistent
  #SingleInstance Force
  #MaxHotkeysPerInterval 999999999

                   F9::Suspend
             RControl::CapsLock

                SC010::Tab

                SC011::q
               +SC011::Q
  RAlt        & SC011::Send {@}
  AppsKey     & SC011::
  RWin        & SC011::
  RControl    & SC011::
  PrintScreen & SC011::Send {PgUp}

                SC012::w
               +SC012::W
  RAlt        & SC012::Send {_}
  AppsKey     & SC012::
  RWin        & SC012::
  RControl    & SC012::
  PrintScreen & SC012::
      if (GetKeyState("CTRL"))  {
          Send ^{Backspace}
      } else {
          Send {Backspace}
      }
  return

                SC013::f
               +SC013::F
  RAlt        & SC013::Send {[}
  AppsKey     & SC013::
  RWin        & SC013::
  RControl    & SC013::
  PrintScreen & SC013::
      if (GetKeyState("CTRL") && !GetKeyState("SHIFT"))  {
          Send ^{Up}
      } else if (!GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send +{Up}
      } else if (GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send ^+{Up}
      } else {
          Send {Up}
      }
  return

                SC014::p
               +SC014::P
  RAlt        & SC014::Send {]}
  AppsKey     & SC014::
  RWin        & SC014::
  RControl    & SC014::
  PrintScreen & SC014::
      if (GetKeyState("CTRL"))  {
          Send ^{Delete}
      } else {
          Send {Delete}
      }
  return

                SC015::b
               +SC015::B
  RAlt        & SC015::Send {^}
  AppsKey     & SC015::
  RWin        & SC015::
  RControl    & SC015::
  PrintScreen & SC015::Send {PgDn}

                SC016::j
               +SC016::J
  RAlt        & SC016::Send {!}

                SC017::l
               +SC017::l
  RAlt        & SC017::Send {<}
  AppsKey     & SC017::
  RWin        & SC017::
  RControl    & SC017::
  PrintScreen & SC017::Send {1}

                SC018::u
               +SC018::U
  RAlt        & SC018::Send {>}
  AppsKey     & SC018::
  RWin        & SC018::
  RControl    & SC018::
  PrintScreen & SC018::Send {2}

                SC019::y
               +SC019::Y
  RAlt        & SC019::Send {=}
  AppsKey     & SC019::
  RWin        & SC019::
  RControl    & SC019::
  PrintScreen & SC019::Send {3}

  RAlt        & SC01A::Send {&}

                SC01E::Control

                SC01F::a
               +SC01F::A
  RAlt        & SC01F::Send {/}
  AppsKey     & SC01F::
  RWin        & SC01F::
  RControl    & SC01F::
  PrintScreen & SC01F::
      if (GetKeyState("SHIFT"))  {
          Send +{Home}
      } else {
          Send {Home}
      }
  return

                SC020::r
               +SC020::R
  RAlt        & SC020::Send {-}
  AppsKey     & SC020::
  RWin        & SC020::
  RControl    & SC020::
  PrintScreen & SC020::
      if (GetKeyState("CTRL") && !GetKeyState("SHIFT"))  {
          Send ^{Left}
      } else if (!GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send +{Left}
      } else if (GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send ^+{Left}
      } else {
          Send {Left}
      }
  return

                SC021::s
               +SC021::S
  RAlt        & SC021::Send {{}
  AppsKey     & SC021::
  RWin        & SC021::
  RControl    & SC021::
  PrintScreen & SC021::
      if (GetKeyState("CTRL") && !GetKeyState("SHIFT"))  {
          Send ^{Down}
      } else if (!GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send +{Down}
      } else if (GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send ^+{Down}
      } else {
          Send {Down}
      }
  return

                SC022::t
               +SC022::T
  RAlt        & SC022::Send {}}
  AppsKey     & SC022::
  RWin        & SC022::
  RControl    & SC022::
  PrintScreen & SC022::
      if (GetKeyState("CTRL") && !GetKeyState("SHIFT"))  {
          Send ^{Right}
      } else if (!GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send +{Right}
      } else if (GetKeyState("CTRL") && GetKeyState("SHIFT"))  {
          Send ^+{Right}
      } else {
          Send {Right}
      }
  return

                SC023::g
               +SC023::G
  RAlt        & SC023::Send {*}
  AppsKey     & SC023::
  RWin        & SC023::
  RControl    & SC023::
  PrintScreen & SC023::
      if (GetKeyState("SHIFT"))  {
          Send +{End}
      } else {
          Send {End}
      }
  return

                SC024::k
               +SC024::K
  RAlt        & SC024::Send {?}
  AppsKey     & SC024::
  RWin        & SC024::
  RControl    & SC024::
  PrintScreen & SC024::Send {.}

                SC025::n
               +SC025::N
  RAlt        & SC025::Send {(}
  AppsKey     & SC025::
  RWin        & SC025::
  RControl    & SC025::
  PrintScreen & SC025::Send {4}

                SC026::e
               +SC026::E
  RAlt        & SC026::Send {)}
  AppsKey     & SC026::
  RWin        & SC026::
  RControl    & SC026::
  PrintScreen & SC026::Send {5}

                SC027::i
               +SC027::I
  RAlt        & SC027::Send {'}
  AppsKey     & SC027::
  RWin        & SC027::
  RControl    & SC027::
  PrintScreen & SC027::Send {6}

                SC028::o
               +SC028::O
  RAlt        & SC028::Send {:}

                SC02C::z
               +SC02C::Z
  RAlt        & SC02C::Send {#}

                SC02D::x
               +SC02D::X
  RAlt        & SC02D::Send {$}

                SC02E::c
               +SC02E::C
  RAlt        & SC02E::Send {|}

                SC02F::d
               +SC02F::D
  RAlt        & SC02F::Send {~}

                SC030::v
               +SC030::V
  RAlt        & SC030::Send {``}

                SC032::m
               +SC032::M
  RAlt        & SC032::Send {+}
  AppsKey     & SC032::
  RWin        & SC032::
  RControl    & SC032::
  PrintScreen & SC032::Send {0}

                SC033::h
               +SC033::H
  RAlt        & SC033::Send {`%}
  AppsKey     & SC033::
  RWin        & SC033::
  RControl    & SC033::
  PrintScreen & SC033::Send {7}

                SC034::Send {,}
               +SC034::Send {?}
  RAlt        & SC034::Send {\}
  AppsKey     & SC034::
  RWin        & SC034::
  RControl    & SC034::
  PrintScreen & SC034::Send {8}

                SC035::Send {.}
               +SC035::Send {!}
  RAlt        & SC035::Send {"}
  AppsKey     & SC035::
  RWin        & SC035::
  RControl    & SC035::
  PrintScreen & SC035::Send {9}

#+end_src
