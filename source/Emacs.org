#+TITLE: Emacs Configuration
#+AUTHOR: Comrade Martin Miroslavovich Michalec

#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ../build/.config/emacs/init.el :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args:shell :shebang "#!/bin/sh" :tangle-mode (identity #o555) :mkdirp yes

:PROPERTIES:
:tangle-mode: (identity #o444)
:mkdirp: yes
:END:

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Set User Emacs Directory

#+begin_src emacs-lisp

  (setq user-init-file (or load-file-name (buffer-file-name)))
  (setq user-emacs-directory "~/.local/share/emacs")

#+end_src

* Update Load Path

I've got a folder of custom Emacs Lisp libraries which must be added to the load path.

#+begin_src emacs-lisp

  ;; Add my library path to load-path
  (push "~/.config/emacs/lisp" load-path)

#+end_src

* Native Compilation

I've started experimenting with the =native-comp= branch of Emacs for increased performance.  Here are some settings to tweak the behavior slightly:

#+begin_src emacs-lisp

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  ; (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src

* Package Setup
** Bootstrap straight.el

#+BEGIN_SRC emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+END_SRC

** Setup use-package

#+begin_src emacs-lisp

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (use-package diminish)

#+end_src

* Theming

#+begin_src emacs-lisp

  (use-package autothemer)

  (load-theme 'industrial t)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Mode Line

#+begin_src emacs-lisp

  (use-package smart-mode-line
    :init (sml/setup))

#+end_src

* Generic Settings
** Keeping Folders Clean

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (setq make-backup-file nil)

#+end_src

** Custom File

#+begin_src emacs-lisp

  (setq custom-file "~/.local/share/emacs/custom.el")

#+end_src

** Shorten Prompts

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

** Auto Reload Files

#+begin_src emacs-lisp

  (auto-revert-mode t)

#+end_src

** Set Backup Directory

#+begin_src emacs-lisp

  (setq backup-directory-alist '(("." . "~/.local/share/emacs/backup/")))

#+end_src

** Trash instead of Deleting

#+begin_src emacs-lisp

  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/trash")

#+end_src

** Start Server

#+begin_src emacs-lisp

  (server-start)

#+end_src

** Window Combination Resize

#+begin_src emacs-lisp

  (setq window-combination-resize t)

#+end_src

** Better Undo

#+begin_src emacs-lisp

  (setq undo-limit 80000000
	evil-want-fine-undo t
	auto-save-default t
        truncate-string-ellipsis "...")

#+end_src

** Scroll

#+begin_src emacs-lisp

  (setq scroll-conservatively 100)

#+end_src

** TODO Ring Bell

#+begin_src emacs-lisp

  (setq ring-bell-function 'ignore)

#+end_src

* UI Settings
** Decluttering

#+begin_src emacs-lisp :tangle ../build/.config/emacs/early-init.el :tangle-mode (identity #o444)

  (scroll-bar-mode -1)
  (  tool-bar-mode -1)
  (  menu-bar-mode -1)

  (tooltip-mode -1)
  (set-fringe-mode 10)

#+end_src

** Cursor Settings
*** Disable Blinking

#+begin_src emacs-lisp

  (blink-cursor-mode -1)

#+end_src

** Relative Line Numbers Setup

#+begin_src emacs-lisp

  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  (setq display-line-numbers      'visual  )
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Column Number

#+begin_src emacs-lisp

  (column-number-mode 1)

#+end_src

** Visible Bell

#+begin_src emacs-lisp

  (setq visible-bell nil)

#+end_src

** Parentheses Settings

#+begin_src emacs-lisp

  (show-paren-mode t)

#+end_src

** Modeline Settings

#+begin_src emacs-lisp

  (setq display-time-day-and-date t)
  (display-time-mode 0)
  (display-battery-mode 0)

#+end_src

** X Cursor

#+begin_src emacs-lisp

  (setq x-stretch-cursor t)

#+end_src
   
** Fonts and Icons
*** Builtin Settings

#+begin_src emacs-lisp

   (set-language-environment "UTF-8")
   (set-default-coding-systems 'utf-8)

#+end_src

*** Font Selection

#+begin_src emacs-lisp

  (set-fontset-font t 'symbol "Noto")
  (set-fontset-font t #x0003C0 "JuliaMono") ;; π

#+end_src

*** Unicode Fonts

#+begin_src emacs-lisp

  (use-package unicode-fonts
    :commands unicode-fonts-setup)

#+end_src

*** All Icons
**** Basic

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t)))

#+end_src

**** Dired

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :diminish
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** Mode Line

#+begin_src emacs-lisp

  ;; (use-package emacs-mini-modeline)

#+end_src

** Highlight line

#+begin_src emacs-lisp

(global-hl-line-mode 1)

#+end_src

** Prettify Symbols

#+begin_src emacs-lisp :tangle no

  (global-prettify-symbols-mode 1)

#+end_src

** Sublimity

#+begin_src emacs-lisp :tangle no

  (use-package sublimity
    :config
    (sublimity-mode 1))

  (use-package sublimity-scroll
    :straight nil)

#+end_src

** Scrolling

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

#+end_src

#+begin_src emacs-lisp :tangle no

  (use-package good-scroll
    :config
    (good-scroll-mode 1))

#+end_src

* Startup Settings
** Disabling Splash Screen

#+begin_src emacs-lisp

  (setq inhibit-startup-screen  t)
  (setq inhibit-startup-message t)

#+end_src

** Setting Initial Buffer

#+begin_src emacs-lisp :tangle no

  (setq initial-buffer-choice "~/index.org")

#+end_src

** Startup Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][github repository]]

#+begin_src emacs-lisp

  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "Welcome to Emacs OS")
    (dashboard-startup-banner 'official)
    (dashboard-center-content t)
    (dashboard-show-shortcuts nil)
    (dashboard-set-heading-icons nil)
    (dashboard-set-file-icons nil)
    (dashboard-set-navigator t)
    (dashboard-set-init-info t)
    (dashboard-projects-backend 'projectile)
    (dashboard-items 
     '((recents  . 10)
       (projects .  5)))
    (dashboard-set-footer nil)
  ; (dashboard-footer-messages '("the message..."))
  ; (dashboard-footer-icon (all-the-icons-octicon "dashboard"
  ;                                               :height 1.1
  ;                                               :v-adjust -0.05
  ;                                               :face 'font-lock-keyword-face))
    :config
    (dashboard-insert-startupify-lists)
    (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src

* Keybinds
** Vim Modes

#+begin_src emacs-lisp

  (use-package evil
    :custom
    (evil-want-integration t  )
    (evil-want-keybinding  nil)
    (evil-want-C-u-scroll  nil)
    (evil-want-C-i-jump    t  )

    :config
    (evil-mode t)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state                 )
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode       'normal)
    (evil-set-initial-state 'dired-by-name        'normal)
    (evil-set-initial-state 'info-mode            'emacs )
    (evil-set-initial-state 'magit-mode           'emacs ))

  (use-package evil-collection
    :diminish evil-collection-unimpaired-mode
    :after evil
    :config (evil-collection-init))

#+end_src

** Vim-like <escape>

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Space for Custom Keybinds
*** general

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer custom/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (custom/leader-keys "t" '(:ignore t :which-key "toggle"))
    (custom/leader-keys "o" '(:ignore t :which-key "org"   )))

#+end_src

*** hydra

#+begin_src emacs-lisp

  (use-package hydra)

#+end_src

**** scale text

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (custom/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Replacements for Builtin Modes
** ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish

    :bind
    ("C-s" . swiper)
    ;:map ivy-switch-buffer-map
    ;("C-d" . ivy-switch-buffer-kill)
    ;:map ivy-reverse-i-search-map
    ;("C-d" . ivy-reverse-i-search-kill)

    :config
    (ivy-mode 1))

#+end_src

** ivy-rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

** counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind
    (("M-x"     . counsel-M-x)
     ("C-x b"   . counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     :map minibuffer-local-map
     ("C-r" . 'counsel-minibuffer-history))

    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)

    :config
    (setq ivy-initial-inputs-alist nil)) ; don't start searches with ^

#+end_src

** swiper

#+begin_src emacs-lisp

  (use-package swiper)

#+end_src

* Project Management
** projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :init
    (when (file-directory-p "~/projects/")
      (setq projectile-project-search-path '("~/projects/")))
    (setq projectile-switch-project-action #'projectile-dired)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom ((projectile-completino-system 'ivy))
    :config (projectile-mode))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** magit

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ; (use-package magit-todo)

#+end_src

** forge

#+begin_src emacs-lisp

  (use-package forge
    :after magit)

#+end_src

* Language Support
** Language Server Protocol (LSP)

Documentation and the list of available languages can be found [[https:emacs-lsp.github.io/lsp-mode/][here]].

#+begin_src emacs-lisp

    (defun custom/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode 1))

    (use-package lsp-mode
      :commands (lsp lsp-deferred)

      :custom
      (lsp-keymap-prefix "C-c l")
      (lsp-idle-delay 0.5)
      (lsp-enable-symbol-highlighting t)
      (lsp-enable-snippet nil) ;; Not supported by company capf, which is the recommended company backend

      :config
      (lsp-register-custom-settings
       '(("pyls.plugins.pyls_black.enabled"  t   t)
         ("pyls.plugins.pyls_isort.enabled"  t   t)
         ("pyls.plugins.pyls_mypy.enabled"   t   t)
         ("pyls.plugins.pyls_mypy.live_mode" nil t)

         ("pyls.plugins.flake8.enabled"      t   t)
         ("pyls.plugins.pycodestyle.enabled" nil t)
         ("pyls.plugins.pyflakes.enabled"    nil t)
         ("pyls.plugins.mccabe.enabled"      nil t)))

      :hook
      ((python-mode . lsp-deferred)
       (lsp-mode . lsp-enable-which-key-integration)
       (lsp-mode . custom/lsp-mode-setup)))

    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)

      :custom
      (lsp-ui-sideline-show-hower t)
      (lsp-ui-sideline-delay 0.5)
      (lsp-ui-sideline-ignore duplicates t)
      (lsp-doc-delay 5)
      (lsp-doc-position 'bottom)
      (lsp-doc-alignment 'frame)
      (lsp-doc-header nil)
      (lsp-doc-include-signature t)
      (lsp-doc-use-childframe t))

    (use-package lsp-treemacs
      :after lsp)

    (use-package lsp-ivy
      :after lsp)

#+end_src

** TODO Debugger Adapter Protocol (DAP)

#+begin_src emacs-lisp

  (use-package dap-mode
    :commands (dap-debug)

    :custom
    (dap-auto-configure-features '(sessions locals tooltip))

    :config
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger"))

    (setq lsp-enable-dap-auto-configuration nil)
    (dap-ui-mode 1))

#+end_src

** TODO yasnippet
** TODO Running Compileres and Unit Test Tools
** Completions

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)

    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)

    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common)))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

**  C/C++
**  sh
**  Python

#+begin_src emacs-lisp

  (use-package python-mode
    :straight nil
    :hook (python-mode . lsp-deferred)

    :custom
    (dap-python-debugger 'debugpy))

  (use-package pyvenv
    :after python-mode
    :custom (pyvenv-workon "emacs")
    :config (pyvenv-tracking-mode 1))

#+end_src

**  Rust
**  Go
**  TypeScript

#+begin_src emacs-lisp

        (use-package typescript-mode
          :mode "\\.ts\\'"
          :hook (typescript-mode . lsp-deferred)

          :custom
          (typescript-indent-level 2)

          :config
          (require 'dap-node)
          (dap-node-setup))

#+end_src

* Window Management

#+begin_src emacs-lisp

  (use-package perspective
    :bind (("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :init
    (persp-mode))

#+end_src

* Desktop Environment

Load up the desktop environment if on a machine that supports it and the =--use-exwm= argument was passed to Emacs on startup.  Desktop environment and window management code can be found in Desktop.org.

#+begin_src emacs-lisp

  (setq custom/is-termux nil)
  (setq custom/exwm-enabled (and (not custom/is-termux)
				 (eq window-system 'x)
				 (seq-contains command-line-args "--use-exwm")))

  (when custom/exwm-enabled
    (require 'custom-desktop))

#+end_src

* File Management
** Dired

#+begin_src emacs-lisp

  (use-package dired
    :straight nil
    :commands
    (dired
     dired-jump)

    :bind
    ("C-x C-j" . dired-jump)

    :custom
    (dired-listing-switches "--all -l --human-readable --group-directories-first")

    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :after dired)

#+end_src

*** Open in External Program

#+begin_src emacs-lisp

  (use-package dired-open
    :after dired

    :config
    ;(add-to-list 'dired-open-functions #'dired-open-xdg t) ;; need to try it first
    (setq dired-open-extensions '(("png" . "sxiv")
                                  ("mkv" . "mpv" ))))

#+end_src

*** Hide Dotfiles

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
  ; :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Terminals and Shells
** term

#+begin_src emacs-lisp

  (use-package term
    :commands term

    :custom
    (explicit-shell-file-name "zsh")
    (explicit-zsh-args '())
    (term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** ansi-term
** vterm

#+begin_src emacs-lisp

  ;(use-package vterm
  ;  :commands vterm
  ;  :custom
  ;  (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;  (vterm-shell "zsh")
  ;  (vterm-max-scrollback 10000))

#+end_src

** shell

#+begin_src emacs-lisp

  (add-hook 'shell-mode-hook
          (lambda ()
            ;; Disabale font-locking in this buffer to improve performance.
            (font-lock-mode -1)
            ;; prevent font-locking from being re-enabled in this buffer
            (make-local-variable 'font-lock-function)
            (setq font-lockfunction (lambda (_) nil))))

#+end_src

** eshell

#+begin_src emacs-lisp

  (defun custom/configure-eshell ()
    ;; Save command history when commands are entered.
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;;Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
	  eshell-buffer-maximum-lines 10000
	  eshell-hist-ignoredups t
	  eshell-scroll-to-bottom-on-input t
	  eshell-prompt-regexp "^[^#$]*[#$] "
	  eshell-highlight-prompt nil
	  eshell-aliases-file "~/.config/emacs/eshell/aliases")

    (defun eshell/ef (fname-regexp &rest dir) (ef fname-regexp default-directory))


    ;;; ---- path manipulation

    (defun pwd-repl-home (pwd)
      (interactive)
      (let* ((home (expand-file-name (getenv "HOME")))
       (home-len (length home)))
	(if (and
       (>= (length pwd) home-len)
       (equal home (substring pwd 0 home-len)))
      (concat "~" (substring pwd home-len))
	  pwd)))

    (defun curr-dir-git-branch-string (pwd)
      "Returns current git branch as a string, or the empty string if
    PWD is not in a git repo (or the git command is not found)."
      (interactive)
      (when (and (eshell-search-path "git")
		 (locate-dominating-file pwd ".git"))
	(let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
	  (propertize (concat "["
		  (if (> (length git-output) 0)
		      (substring git-output 0 -1)
		    "(no branch)")
		  "]") 'face `(:foreground "green"))
	  )))

    (setq eshell-prompt-function
	  (lambda ()
	    (concat
	     (propertize ((lambda (p-lst)
		(if (> (length p-lst) 3)
		    (concat
		     (mapconcat (lambda (elm) (if (zerop (length elm)) ""
						(substring elm 0 1)))
				(butlast p-lst 3)
				"/")
		     "/"
		     (mapconcat (lambda (elm) elm)
				(last p-lst 3)
				"/"))
		  (mapconcat (lambda (elm) elm)
			     p-lst
			     "/")))
	      (split-string (pwd-repl-home (eshell/pwd)) "/")) 'face `(:foreground "yellow"))
	     (or (curr-dir-git-branch-string (eshell/pwd)))
	     (propertize "$ " 'face 'default)
	    ))))

  (use-package eshell
    :hook (eshell-first-time-mode . custom/configure-eshell)

    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("top" "htop" "nmtui" "ssh" "tmux" "guix" "less" "pip" "bat")))
    (eshell-git-prompt-use-theme 'default))

#+BEGIN_SRC shell :tangle ../build/.local/bin/visual

  exec $@

#+END_SRC


#+end_src

#+begin_src shell :tangle ../build/.config/emacs/eshell/aliases :tangle-mode (identity #o444)

  alias ff 'find-file $1'
  alias d 'dired $1'

#+end_src

* Modes
** Org Mode

#+begin_src emacs-lisp

  (defun custom/org-mode-setup ()
    (org-indent-mode       1)
    (variable-pitch-mode   1)
    (auto-fill-mode        1)
    (visual-line-mode      1)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . custom/org-mode-setup)
    :custom
    (org-ellipsis " ▾")
    (org-hide-emphasis-markers t)

    (org-startup-folded 'showeverything)

    (org-src-tab-acts-natively t)
    (org-src-preserve-indentation nil)
    (org-edit-src-content-indentation 2)

    (org-tags-column 0)
    (org-agenda-align-tags-to-column 80)

    (org-agenda-start-on-weekday nil)
    (org-agenda-span 10)
    (org-agenda-start-day "-3d")

    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)

    (org-agenda-files '("~/agenda/Task.org"
                        "~/agenda/Event.org"
                        "~/agenda/Birthday.org"
                        "~/agenda/Nameday.org"
                        "~/agenda/Journal.org"
                        "~/agenda/Habit.org"
                        "~/agenda/Metric.org"))

    (org-refile-targets
          '(("Task.org"  :maxlevel . 1)  
            ("Event.org" :maxlevel . 1)))

    (org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "|" "COMPLETED(c)" "CANCELED(k@)")))

    (org-tag-alist
        '((:startgroup)
          ; Put mutually exclusive tags here
          ("pc"       . ?c)
          ("car"      . ?C)
          ("hosting"  . ?h)
          (:endgroup)
          ("@errand"  . ?E)
          ("@home"    . ?H)
          ("@work"    . ?W)
          ("agenda"   . ?a)
          ("planning" . ?p)
          ("publish"  . ?P)
          ("batch"    . ?b)
          ("note"     . ?n)
          ("idea"     . ?i)))

    (org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work")

            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANCELED"
                    ((org-agenda-overriding-header "Canceled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (org-capture-templates
          '(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/agenda/Task.org" "Inbox")
             "* TODO %?\n%U\n%a\n%i" :empty-lines 1)
            ("ts" "Clocked Entry Subtask" entry (clock)
             "* TODO %?\n%U\n%a\n%i" :empty-lines 1)

            ("e" "Events")
            ("ee" "Event" entry (file+olp "~/agenda/Event.org" "Inbox")
             "* %?\n%U\n%a" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry (file+olp+datetree "~/agenda/Journal.org")
             "\n* %<%H:%M> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry (file+olp+datetree "~/agenda/Journal.org")
             "* %<%H:%M> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/agenda/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/agenda/Metrics.org" "Weight")
             "| %U | %^{Weight [kg]} | %^{Notes} |" :kill-buffer t)))

    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers))

  (custom/leader-keys
    "oa" '(:which-key "Agenda")
    "oaa" '((lambda () (interactive) (org-agenda nil "a")) :which-key "Agenda List")
    "oad" '((lambda () (interactive) (org-agenda nil "d")) :which-key "Dashboard")
    "oan" '((lambda () (interactive) (org-agenda nil "n")) :which-key "Next Tasks")
    "oaW" '((lambda () (interactive) (org-agenda nil "W")) :which-key "Work Tasks")
    "oae" '((lambda () (interactive) (org-agenda nil "e")) :which-key "Low Effort Tasks")
    "oaw" '((lambda () (interactive) (org-agenda nil "w")) :which-key "Workflow Status")
    "oat" '((lambda () (interactive) (org-agenda nil "t")) :which-key "Todo List")
    "oaT" '((lambda () (interactive) (org-agenda nil "T")) :which-key "Todo List Specific")
    "oam" '((lambda () (interactive) (org-agenda nil "m")) :which-key "Tags View")
    "oaM" '((lambda () (interactive) (org-agenda nil "M")) :which-key "Tags View Todo")
    "oas" '((lambda () (interactive) (org-agenda nil "s")) :which-key "Search")
    "oaS" '((lambda () (interactive) (org-agenda nil "S")) :which-key "Search Todo")

    "oc" '(:which-key "Capture")
    "oct" '(:which-key "Task")
    "octt" '((lambda () (interactive) (org-capture nil "tt")) :which-key "Task")
    "octs" '((lambda () (interactive) (org-capture nil "tt")) :which-key "Clocked Entry Subtask")
    "oce" '(:which-key "Event")
    "ocee" '((lambda () (interactive) (org-capture nil "ee")) :which-key "Event")
    "ocj" '(:which-key "Journal")
    "ocjj" '((lambda () (interactive) (org-capture nil "jj")) :which-key "Journal")
    "ocjm" '((lambda () (interactive) (org-capture nil "jm")) :which-key "Meeting")
    "ocw" '(:which-key "Workflow")
    "ocwe" '((lambda () (interactive) (org-capture nil "we")) :which-key "Checking Email")
    "ocm" '(:which-key "Metric")
    "ocmw" '((lambda () (interactive) (org-capture nil "jj")) :which-key "Weight"))

#+end_src

*** Modules
**** Indent

#+begin_src emacs-lisp

  (use-package org-indent
    :straight nil
    :after org)

#+end_src

**** Habit

#+begin_src emacs-lisp

  (use-package org-habit
    :straight nil
    :after org
    :custom
    (org-habit-graph-column 60)
    (org-habit-preceding-days 30)
    (org-habit-following-days  2)
    (org-habit-show-all-today t))

#+end_src

*** Theming
**** Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("⦿" "⌾" "⊚" "⊙" "◯" "￮" "•" "·")))

#+end_src

**** Lists

#+begin_src emacs-lisp

  (font-lock-add-keywords 'org-mode
                          '(("^\s*\\([-]\\) "
                            (0 (prog1 ()
                                 (compose-region (match-beginning 1)
                                                 (match-end 1)
                                                 "－"))))))

#+end_src

**** Tables

#+begin_src emacs-lisp :tangle no

  (font-lock-add-keywords
   'org-mode
   '(("^\\(|\\)[^-]"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "┃"))))
     ("[^-]\\(|\\)$"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "┃"))))
     (" \\(|\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "┃"))))
     ("^\\(|\\)-"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "┣"))))
     ("-\\(|\\)$"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "┫"))))
     ("-\\(-\\)"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))
     ("\\(-\\)-"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))
     ("+\\(-\\)-"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))
     ("-\\(-\\)+"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))
     ("|\\(-\\)-"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))
     ("-\\(-\\)|"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))
     ("-\\(+\\)-"
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "╋"))))))

#+end_src

**** Visual Fill

#+begin_src emacs-lisp

  (defun custom/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode t))

  (use-package visual-fill-column
    :hook (org-mode . custom/org-mode-visual-fill)
    :custom
    (visual-fill-column-center-text t))

#+end_src

*** Babel
**** Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (shell      . t)
      (python     . t)))

  (push '("conf-unix"      . conf-unix     ) org-src-lang-modes)
  (push '("conf-xdefaults" . conf-xdefaults) org-src-lang-modes)

#+end_src

**** Structure Templates

Org Mode’s structure templates feature enables you to quickly insert
code blocks into your Org files in combination with org-tempo by
typing ~<~ followed by the template name like ~el~ or ~py~ and then press =TAB=. For example, to insert an empty ~emacs-lisp~ block below, you can type ~<el~ and press =TAB= to expand into such a block.

You can add more src block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"     ))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"    )))

#+end_src

**** Automatically Tangle Configuration files

#+begin_src emacs-lisp

  (defun custom/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/dotfiles/source/"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'custom/org-babel-tangle-config)))

#+end_src

** KOCMOC

#+begin_src emacs-lisp

      (define-minor-mode kocmoc-mode
        "Toggle KOCMOC mode."
        :global t
        (setq kocmoc-mode-line-string
              (concat " "
                      (propertize " ☭  " 'face '(:foreground "#FFFF00"
                                                 :background "#FF0000"))
                      (propertize  " π " 'face '(:foreground "#00FF00"))))
        (if kocmoc-mode
            (add-to-list 'global-mode-string kocmoc-mode-line-string t)
          (setq global-mode-string
                (delq 'kocmoc-mode-line-string global-mode-string))))
      (kocmoc-mode 1)

#+end_src

** Rainbow Mode

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode)
    :config
    (advice-add 'rainbow-colorize-match :override
                (lambda (color &optional match)
                  (let ((match (or match 0)))
                    (put-text-property
                     (match-beginning match) (match-end match)
                     'face `((:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                               "white" "black"))
                             (:background ,color)
                             (:font ,"Terminus"))))))) ;; I've added this line

#+end_src

** Pretty Mode

#+begin_src emacs-lisp

  (use-package pretty-mode
    :config (global-pretty-mode))

#+end_src

** Json Mode

#+begin_src emacs-lisp

  (use-package json-mode)

#+end_src

** Whitespace Mode

#+begin_src emacs-lisp

  ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://ergoemacs.org/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          ))

  (add-hook 'prog-mode-hook 'whitespace-mode)

#+end_src

* Utilities
** Command Logging

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

** Touch Typing Practice

#+begin_src emacs-lisp

  (use-package speed-type
    :commands (speed-type))

  (define-minor-mode speed-type-mode
    "Adds minor mode to speed-type buffers"
    :lighter " speed-type"
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map (kbd "M-C-q")
                (lambda ()
                  (interactive)
                  (kill-this-buffer)
                  (modify-frame-parameters (selected-frame) (list (cons 'cursor-type 'box)))
                  (speed-type-mode 0)))
              (define-key map (kbd "M-C-k")
                (lambda ()
                  (interactive)
                  (kill-this-buffer)
                  (custom/type-racer)))
              map)
    :global t
    (visual-line-mode 1)
    (visual-fill-column-mode 1))

  (defun custom/type-racer ()
    (interactive)
    (let ((buffer (get-buffer-create "*Type Racer*")))
      (switch-to-buffer buffer)
      (shell-command "shuf -n1 ~/downloads/texts" buffer)
      (speed-type-buffer t)
      (kill-buffer buffer)
      (evil-emacs-state)
      (modify-frame-parameters (selected-frame) (list (cons 'cursor-type 'hbar)))
      (speed-type-mode 1)))

#+end_src

** Mark Multiple

#+begin_src emacs-lisp

  (use-package mark-multiple
    :bind (("C-c n" . 'mark-next-like-this))) ;; bad kbd

#+end_src

** Expand Region

#+begin_src emacs-lisp

  (use-package expand-region
    :bind (("C-c e" . er/expand-region))) ;; bad kbd

#+end_src

** Floobits

#+begin_src emacs-lisp

  (use-package floobits)

#+end_src

~~/.floorc.json~:

#+begin_src json :tangle no

  {
    "auth": {
      "floobits.michalec.dev": {
        "username": "your_username",
        "api_key": "your_api_key",
        "secret": "your_api_secret_not_your_password"
      }
    }
  }

#+end_src

* Help Improvements
** which-key

#+begin_src emacs-lisp

  (use-package which-key
    :diminish
    :defer 0

    :custom
    (which-key-idle-delay 0.5)

    :config
    (which-key-mode))

#+end_src

** helpful

#+begin_src emacs-lisp

  (use-package helpful
    :commands
    (describe-function
     describe-command
     describe-variable
     describe-key)

    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)

    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command ] . helpful-command          )
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key     ] . helpful-key              ))

#+end_src
